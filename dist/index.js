"use strict";var F=Object.create;var U=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var O=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var $=(e,t)=>{for(var a in t)U(e,a,{get:t[a],enumerable:!0})},S=(e,t,a,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of O(t))!T.call(e,s)&&s!==a&&U(e,s,{get:()=>t[s],enumerable:!(r=E(t,s))||r.enumerable});return e};var n=(e,t,a)=>(a=e!=null?F(x(e)):{},S(t||!e||!e.__esModule?U(a,"default",{value:e,enumerable:!0}):a,e)),I=e=>S(U({},"__esModule",{value:!0}),e);var q={};$(q,{handleLog:()=>D,handleReferralBoundLog:()=>G,handleRemoteBalanceUpdatedLog:()=>L,handleRiskBalanceUpdatedLog:()=>j,handleStakedLog:()=>H,handleTransaction:()=>_,handleUnstakeAcceptedLog:()=>W,handleUnstakeFinishedLog:()=>V,handleUsdVaultWithdrawLog:()=>J});module.exports=I(q);var p=n(require("assert")),d=class{constructor(t,a,r,s,A){this.id=t,this.to=a,this.from=r,this.value=s,this.contractAddress=A}get _name(){return"Transfer"}async save(){let t=this.id;(0,p.default)(t!==null,"Cannot save Transfer entity without an ID"),await store.set("Transfer",t.toString(),this)}static async remove(t){(0,p.default)(t!==null,"Cannot remove Transfer entity without an ID"),await store.remove("Transfer",t.toString())}static async get(t){(0,p.default)(t!=null,"Cannot get Transfer entity without an ID");let a=await store.get("Transfer",t.toString());if(a)return this.create(a)}static async getByFields(t,a){return(await store.getByFields("Transfer",t,a)).map(s=>this.create(s))}static create(t){(0,p.default)(t.id!==void 0&&t.id!==null,"id must be provided");let a=new this(t.id,t.to,t.from,t.value,t.contractAddress);return Object.assign(a,t),a}};var c=n(require("assert")),l=class{constructor(t,a,r,s,A){this.id=t,this.owner=a,this.spender=r,this.value=s,this.contractAddress=A}get _name(){return"Approval"}async save(){let t=this.id;(0,c.default)(t!==null,"Cannot save Approval entity without an ID"),await store.set("Approval",t.toString(),this)}static async remove(t){(0,c.default)(t!==null,"Cannot remove Approval entity without an ID"),await store.remove("Approval",t.toString())}static async get(t){(0,c.default)(t!=null,"Cannot get Approval entity without an ID");let a=await store.get("Approval",t.toString());if(a)return this.create(a)}static async getByFields(t,a){return(await store.getByFields("Approval",t,a)).map(s=>this.create(s))}static create(t){(0,c.default)(t.id!==void 0&&t.id!==null,"id must be provided");let a=new this(t.id,t.owner,t.spender,t.value,t.contractAddress);return Object.assign(a,t),a}};var g=n(require("assert")),m=class{constructor(t){this.id=t}get _name(){return"StakedRecord"}async save(){let t=this.id;(0,g.default)(t!==null,"Cannot save StakedRecord entity without an ID"),await store.set("StakedRecord",t.toString(),this)}static async remove(t){(0,g.default)(t!==null,"Cannot remove StakedRecord entity without an ID"),await store.remove("StakedRecord",t.toString())}static async get(t){(0,g.default)(t!=null,"Cannot get StakedRecord entity without an ID");let a=await store.get("StakedRecord",t.toString());if(a)return this.create(a)}static async getByFields(t,a){return(await store.getByFields("StakedRecord",t,a)).map(s=>this.create(s))}static create(t){(0,g.default)(t.id!==void 0&&t.id!==null,"id must be provided");let a=new this(t.id);return Object.assign(a,t),a}};var u=n(require("assert")),o=class{constructor(t){this.id=t}get _name(){return"Staker"}async save(){let t=this.id;(0,u.default)(t!==null,"Cannot save Staker entity without an ID"),await store.set("Staker",t.toString(),this)}static async remove(t){(0,u.default)(t!==null,"Cannot remove Staker entity without an ID"),await store.remove("Staker",t.toString())}static async get(t){(0,u.default)(t!=null,"Cannot get Staker entity without an ID");let a=await store.get("Staker",t.toString());if(a)return this.create(a)}static async getByFields(t,a){return(await store.getByFields("Staker",t,a)).map(s=>this.create(s))}static create(t){(0,u.default)(t.id!==void 0&&t.id!==null,"id must be provided");let a=new this(t.id);return Object.assign(a,t),a}};var k=n(require("assert")),i=class{constructor(t){this.id=t}get _name(){return"UnstakeAccepted"}async save(){let t=this.id;(0,k.default)(t!==null,"Cannot save UnstakeAccepted entity without an ID"),await store.set("UnstakeAccepted",t.toString(),this)}static async remove(t){(0,k.default)(t!==null,"Cannot remove UnstakeAccepted entity without an ID"),await store.remove("UnstakeAccepted",t.toString())}static async get(t){(0,k.default)(t!=null,"Cannot get UnstakeAccepted entity without an ID");let a=await store.get("UnstakeAccepted",t.toString());if(a)return this.create(a)}static async getByFields(t,a){return(await store.getByFields("UnstakeAccepted",t,a)).map(s=>this.create(s))}static create(t){(0,k.default)(t.id!==void 0&&t.id!==null,"id must be provided");let a=new this(t.id);return Object.assign(a,t),a}};var f=n(require("assert")),b=class{constructor(t,a,r){this.id=t,this.user=a,this.referrer=r}get _name(){return"ReferralBound"}async save(){let t=this.id;(0,f.default)(t!==null,"Cannot save ReferralBound entity without an ID"),await store.set("ReferralBound",t.toString(),this)}static async remove(t){(0,f.default)(t!==null,"Cannot remove ReferralBound entity without an ID"),await store.remove("ReferralBound",t.toString())}static async get(t){(0,f.default)(t!=null,"Cannot get ReferralBound entity without an ID");let a=await store.get("ReferralBound",t.toString());if(a)return this.create(a)}static async getByUser(t,a){return(await store.getByField("ReferralBound","user",t,a)).map(s=>this.create(s))}static async getByReferrer(t,a){return(await store.getByField("ReferralBound","referrer",t,a)).map(s=>this.create(s))}static async getByFields(t,a){return(await store.getByFields("ReferralBound",t,a)).map(s=>this.create(s))}static create(t){(0,f.default)(t.id!==void 0&&t.id!==null,"id must be provided");let a=new this(t.id,t.user,t.referrer);return Object.assign(a,t),a}};var w=n(require("assert")),y=class{constructor(t,a,r,s){this.id=t,this.contractAddress=a,this.opType=r,this.amount=s}get _name(){return"RemoteBalanceUpdated"}async save(){let t=this.id;(0,w.default)(t!==null,"Cannot save RemoteBalanceUpdated entity without an ID"),await store.set("RemoteBalanceUpdated",t.toString(),this)}static async remove(t){(0,w.default)(t!==null,"Cannot remove RemoteBalanceUpdated entity without an ID"),await store.remove("RemoteBalanceUpdated",t.toString())}static async get(t){(0,w.default)(t!=null,"Cannot get RemoteBalanceUpdated entity without an ID");let a=await store.get("RemoteBalanceUpdated",t.toString());if(a)return this.create(a)}static async getByFields(t,a){return(await store.getByFields("RemoteBalanceUpdated",t,a)).map(s=>this.create(s))}static create(t){(0,w.default)(t.id!==void 0&&t.id!==null,"id must be provided");let a=new this(t.id,t.contractAddress,t.opType,t.amount);return Object.assign(a,t),a}};var h=n(require("assert")),P=class{constructor(t,a,r){this.id=t,this.contractAddress=a,this.newBalance=r}get _name(){return"RiskBalanceUpdated"}async save(){let t=this.id;(0,h.default)(t!==null,"Cannot save RiskBalanceUpdated entity without an ID"),await store.set("RiskBalanceUpdated",t.toString(),this)}static async remove(t){(0,h.default)(t!==null,"Cannot remove RiskBalanceUpdated entity without an ID"),await store.remove("RiskBalanceUpdated",t.toString())}static async get(t){(0,h.default)(t!=null,"Cannot get RiskBalanceUpdated entity without an ID");let a=await store.get("RiskBalanceUpdated",t.toString());if(a)return this.create(a)}static async getByFields(t,a){return(await store.getByFields("RiskBalanceUpdated",t,a)).map(s=>this.create(s))}static create(t){(0,h.default)(t.id!==void 0&&t.id!==null,"id must be provided");let a=new this(t.id,t.contractAddress,t.newBalance);return Object.assign(a,t),a}};var B=n(require("assert")),v=class{constructor(t,a,r,s){this.id=t,this.contractAddress=a,this.to=r,this.amount=s}get _name(){return"UsdVaultWithdraw"}async save(){let t=this.id;(0,B.default)(t!==null,"Cannot save UsdVaultWithdraw entity without an ID"),await store.set("UsdVaultWithdraw",t.toString(),this)}static async remove(t){(0,B.default)(t!==null,"Cannot remove UsdVaultWithdraw entity without an ID"),await store.remove("UsdVaultWithdraw",t.toString())}static async get(t){(0,B.default)(t!=null,"Cannot get UsdVaultWithdraw entity without an ID");let a=await store.get("UsdVaultWithdraw",t.toString());if(a)return this.create(a)}static async getByTo(t,a){return(await store.getByField("UsdVaultWithdraw","to",t,a)).map(s=>this.create(s))}static async getByFields(t,a){return(await store.getByFields("UsdVaultWithdraw",t,a)).map(s=>this.create(s))}static create(t){(0,B.default)(t.id!==void 0&&t.id!==null,"id must be provided");let a=new this(t.id,t.contractAddress,t.to,t.amount);return Object.assign(a,t),a}};var N=n(require("assert"));async function D(e){logger.info(`New transfer transaction log at block ${e.blockNumber}`),(0,N.default)(e.args,"No log.args"),await d.create({id:e.transactionHash,blockHeight:BigInt(e.blockNumber),to:e.args.to,from:e.args.from,value:e.args.value.toBigInt(),contractAddress:e.address}).save()}async function _(e){logger.info(`New Approval transaction at block ${e.blockNumber}`),(0,N.default)(e.args,"No tx.args"),await l.create({id:e.hash,owner:e.from,spender:await e.args[0],value:BigInt(await e.args[1].toString()),contractAddress:e.to||""}).save()}var R=n(require("assert"));async function H(e){logger.info(`New staked transaction log at block ${e.blockNumber}`),(0,R.default)(e.args,"No staked.args"),await m.create({id:e.transactionHash,pool:e.address,blockHeight:BigInt(e.blockNumber),staker:e.args.staker,stakeToken:"0x000",stakeAmount:e.args.amount.toBigInt(),mintReceiver:e.args.receiver,mintAmount:e.args.minted.toBigInt(),timestamp:new Date(Number(e.transaction.blockTimestamp)*1e3)}).save();let a=`${e.address}-${e.args.staker}`,r=await o.get(a);r?(r.mintAmount=e.args.minted.toBigInt()+r.mintAmount,r.stakeAmount=e.args.amount.toBigInt()+r.stakeAmount):r=await o.create({id:a,pool:e.address,staker:e.args.staker,stakeAmount:e.args.amount.toBigInt(),mintAmount:e.args.minted.toBigInt()}),await r.save()}async function W(e){logger.info(`New unstake accepted transaction log at block ${e.blockNumber}`),(0,R.default)(e.args,"No unstake.args"),logger.info("unstake========================================"),logger.info(`unstake.address: ${e.address}`),logger.info(`unstake.blockNumber: ${e.blockNumber}`),logger.info(`unstake.transactionHash: ${e.transactionHash}`),logger.info(`unstake.transaction.blockTimestamp: ${e.transaction.blockTimestamp}`),logger.info(`unstake.args.accept_id: ${e.args.accept_id}`),logger.info(`unstake.args.staker: ${e.args.staker}`),logger.info(`unstake.args.receiver: ${e.args.receiver}`),logger.info(`unstake.args.unstake_amount: ${e.args.unstake_amount}`),logger.info(`unstake.args.redeem_earning: ${e.args.redeem_earning}`),logger.info(`unstake.args.withdraw_eth: ${e.args.withdraw_eth}`),logger.info(`unstake.args.repay_usdc: ${e.args.repay_usdc}`),logger.info(`unstake.args: ${JSON.stringify(e.args)}`),logger.info(`unstake.args.accept_id: ${e.args.accept_id}`),logger.info("unstake========================================"),await i.create({id:e.args.accept_id.toString(),txHash:e.transactionHash,pool:e.address,blockHeight:BigInt(e.blockNumber),staker:e.args.staker,unstakeToken:e.address,unstakeAmount:e.args.unstake_amount.toBigInt(),redeemEarning:e.args.redeem_earning.toBigInt(),withdrawEth:e.args.withdraw_eth.toBigInt(),repayUsdc:e.args.repay_usdc.toBigInt(),status:"pending",timestamp:new Date(Number(e.transaction.blockTimestamp)*1e3)}).save()}async function V(e){logger.info(`New unstake finished transaction log at block ${e.blockNumber}`),(0,R.default)(e.args,"No finished.args");let t=await i.get(e.args.accept_id.toString());logger.info("finished========================================"),logger.info(`finished.address: ${e.address}`),logger.info(`finished.blockNumber: ${e.blockNumber}`),logger.info(`finished.transactionHash: ${e.transactionHash}`),logger.info(`finished.transaction.blockTimestamp: ${e.transaction.blockTimestamp}`),logger.info(`finished.args.accept_id: ${e.args.accept_id}`),t&&t.status==="pending"&&(t.status="success",await t.save())}async function G(e){logger.info(`New referral bound transaction log at block ${e.blockNumber}`),(0,R.default)(e.args,"No referralBound.args"),logger.info("referralBound========================================"),logger.info(`referralBound.address: ${e.address}`),logger.info(`referralBound.blockNumber: ${e.blockNumber}`),logger.info(`referralBound.transactionHash: ${e.transactionHash}`),logger.info(`referralBound.transaction.blockTimestamp: ${e.transaction.blockTimestamp}`),logger.info(`referralBound.args.user: ${e.args.user}`),logger.info(`referralBound.args.referrer: ${e.args.referrer}`),logger.info("referralBound========================================"),await b.create({id:e.transactionHash,blockHeight:BigInt(e.blockNumber),user:e.args.user,referrer:e.args.referrer,timestamp:new Date(Number(e.transaction.blockTimestamp)*1e3)}).save()}var C=n(require("assert"));async function L(e){logger.info(`New remote balance updated transaction log at block ${e.blockNumber}`),(0,C.default)(e.args,"No remoteBalanceUpdated.args"),logger.info("remoteBalanceUpdated========================================"),logger.info(`remoteBalanceUpdated.address: ${e.address}`),logger.info(`remoteBalanceUpdated.blockNumber: ${e.blockNumber}`),logger.info(`remoteBalanceUpdated.transactionHash: ${e.transactionHash}`),logger.info(`remoteBalanceUpdated.transaction.blockTimestamp: ${e.transaction.blockTimestamp}`),logger.info(`remoteBalanceUpdated.args.op: ${e.args.op}`),logger.info(`remoteBalanceUpdated.args.amount: ${e.args.amount}`),logger.info("remoteBalanceUpdated========================================"),await y.create({id:e.transactionHash,blockHeight:BigInt(e.blockNumber),contractAddress:e.address,opType:e.args.op,amount:e.args.amount.toBigInt(),timestamp:new Date(Number(e.transaction.blockTimestamp)*1e3)}).save()}async function j(e){logger.info(`New risk balance updated transaction log at block ${e.blockNumber}`),(0,C.default)(e.args,"No riskBalanceUpdated.args"),logger.info("riskBalanceUpdated========================================"),logger.info(`riskBalanceUpdated.address: ${e.address}`),logger.info(`riskBalanceUpdated.blockNumber: ${e.blockNumber}`),logger.info(`riskBalanceUpdated.transactionHash: ${e.transactionHash}`),logger.info(`riskBalanceUpdated.transaction.blockTimestamp: ${e.transaction.blockTimestamp}`),logger.info(`riskBalanceUpdated.args.newBalance: ${e.args.newBalance}`),logger.info("riskBalanceUpdated========================================"),await P.create({id:e.transactionHash,blockHeight:BigInt(e.blockNumber),contractAddress:e.address,newBalance:e.args.newBalance.toBigInt(),timestamp:new Date(Number(e.transaction.blockTimestamp)*1e3)}).save()}async function J(e){logger.info(`New USD vault withdraw transaction log at block ${e.blockNumber}`),(0,C.default)(e.args,"No withdraw.args"),logger.info("withdraw========================================"),logger.info(`withdraw.address: ${e.address}`),logger.info(`withdraw.blockNumber: ${e.blockNumber}`),logger.info(`withdraw.transactionHash: ${e.transactionHash}`),logger.info(`withdraw.transaction.blockTimestamp: ${e.transaction.blockTimestamp}`),logger.info(`withdraw.args.to: ${e.args.to}`),logger.info(`withdraw.args.amount: ${e.args.amount}`),logger.info("withdraw========================================"),await v.create({id:e.transactionHash,blockHeight:BigInt(e.blockNumber),contractAddress:e.address,to:e.args.to,amount:e.args.amount.toBigInt(),timestamp:new Date(Number(e.transaction.blockTimestamp)*1e3)}).save()}0&&(module.exports={handleLog,handleReferralBoundLog,handleRemoteBalanceUpdatedLog,handleRiskBalanceUpdatedLog,handleStakedLog,handleTransaction,handleUnstakeAcceptedLog,handleUnstakeFinishedLog,handleUsdVaultWithdrawLog});
//# sourceMappingURL=data:application/json;base64,
