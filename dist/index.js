"use strict";var F=Object.create;var U=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var O=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var I=(e,t)=>{for(var a in t)U(e,a,{get:t[a],enumerable:!0})},S=(e,t,a,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of O(t))!T.call(e,s)&&s!==a&&U(e,s,{get:()=>t[s],enumerable:!(r=E(t,s))||r.enumerable});return e};var n=(e,t,a)=>(a=e!=null?F(x(e)):{},S(t||!e||!e.__esModule?U(a,"default",{value:e,enumerable:!0}):a,e)),$=e=>S(U({},"__esModule",{value:!0}),e);var q={};I(q,{handleLog:()=>D,handleReferralBoundLog:()=>G,handleRemoteBalanceUpdatedLog:()=>L,handleRiskBalanceUpdatedLog:()=>j,handleStakedLog:()=>H,handleTransaction:()=>_,handleUnstakeAcceptedLog:()=>W,handleUnstakeFinishedLog:()=>V,handleUsdVaultWithdrawLog:()=>J});module.exports=$(q);var p=n(require("assert")),d=class{constructor(t,a,r,s,A){this.id=t,this.to=a,this.from=r,this.value=s,this.contractAddress=A}get _name(){return"Transfer"}async save(){let t=this.id;(0,p.default)(t!==null,"Cannot save Transfer entity without an ID"),await store.set("Transfer",t.toString(),this)}static async remove(t){(0,p.default)(t!==null,"Cannot remove Transfer entity without an ID"),await store.remove("Transfer",t.toString())}static async get(t){(0,p.default)(t!=null,"Cannot get Transfer entity without an ID");let a=await store.get("Transfer",t.toString());if(a)return this.create(a)}static async getByFields(t,a){return(await store.getByFields("Transfer",t,a)).map(s=>this.create(s))}static create(t){(0,p.default)(t.id!==void 0&&t.id!==null,"id must be provided");let a=new this(t.id,t.to,t.from,t.value,t.contractAddress);return Object.assign(a,t),a}};var c=n(require("assert")),l=class{constructor(t,a,r,s,A){this.id=t,this.owner=a,this.spender=r,this.value=s,this.contractAddress=A}get _name(){return"Approval"}async save(){let t=this.id;(0,c.default)(t!==null,"Cannot save Approval entity without an ID"),await store.set("Approval",t.toString(),this)}static async remove(t){(0,c.default)(t!==null,"Cannot remove Approval entity without an ID"),await store.remove("Approval",t.toString())}static async get(t){(0,c.default)(t!=null,"Cannot get Approval entity without an ID");let a=await store.get("Approval",t.toString());if(a)return this.create(a)}static async getByFields(t,a){return(await store.getByFields("Approval",t,a)).map(s=>this.create(s))}static create(t){(0,c.default)(t.id!==void 0&&t.id!==null,"id must be provided");let a=new this(t.id,t.owner,t.spender,t.value,t.contractAddress);return Object.assign(a,t),a}};var g=n(require("assert")),m=class{constructor(t){this.id=t}get _name(){return"StakedRecord"}async save(){let t=this.id;(0,g.default)(t!==null,"Cannot save StakedRecord entity without an ID"),await store.set("StakedRecord",t.toString(),this)}static async remove(t){(0,g.default)(t!==null,"Cannot remove StakedRecord entity without an ID"),await store.remove("StakedRecord",t.toString())}static async get(t){(0,g.default)(t!=null,"Cannot get StakedRecord entity without an ID");let a=await store.get("StakedRecord",t.toString());if(a)return this.create(a)}static async getByFields(t,a){return(await store.getByFields("StakedRecord",t,a)).map(s=>this.create(s))}static create(t){(0,g.default)(t.id!==void 0&&t.id!==null,"id must be provided");let a=new this(t.id);return Object.assign(a,t),a}};var u=n(require("assert")),o=class{constructor(t){this.id=t}get _name(){return"Staker"}async save(){let t=this.id;(0,u.default)(t!==null,"Cannot save Staker entity without an ID"),await store.set("Staker",t.toString(),this)}static async remove(t){(0,u.default)(t!==null,"Cannot remove Staker entity without an ID"),await store.remove("Staker",t.toString())}static async get(t){(0,u.default)(t!=null,"Cannot get Staker entity without an ID");let a=await store.get("Staker",t.toString());if(a)return this.create(a)}static async getByFields(t,a){return(await store.getByFields("Staker",t,a)).map(s=>this.create(s))}static create(t){(0,u.default)(t.id!==void 0&&t.id!==null,"id must be provided");let a=new this(t.id);return Object.assign(a,t),a}};var k=n(require("assert")),i=class{constructor(t){this.id=t}get _name(){return"UnstakeAccepted"}async save(){let t=this.id;(0,k.default)(t!==null,"Cannot save UnstakeAccepted entity without an ID"),await store.set("UnstakeAccepted",t.toString(),this)}static async remove(t){(0,k.default)(t!==null,"Cannot remove UnstakeAccepted entity without an ID"),await store.remove("UnstakeAccepted",t.toString())}static async get(t){(0,k.default)(t!=null,"Cannot get UnstakeAccepted entity without an ID");let a=await store.get("UnstakeAccepted",t.toString());if(a)return this.create(a)}static async getByFields(t,a){return(await store.getByFields("UnstakeAccepted",t,a)).map(s=>this.create(s))}static create(t){(0,k.default)(t.id!==void 0&&t.id!==null,"id must be provided");let a=new this(t.id);return Object.assign(a,t),a}};var f=n(require("assert")),b=class{constructor(t,a,r){this.id=t,this.user=a,this.referrer=r}get _name(){return"ReferralBound"}async save(){let t=this.id;(0,f.default)(t!==null,"Cannot save ReferralBound entity without an ID"),await store.set("ReferralBound",t.toString(),this)}static async remove(t){(0,f.default)(t!==null,"Cannot remove ReferralBound entity without an ID"),await store.remove("ReferralBound",t.toString())}static async get(t){(0,f.default)(t!=null,"Cannot get ReferralBound entity without an ID");let a=await store.get("ReferralBound",t.toString());if(a)return this.create(a)}static async getByUser(t,a){return(await store.getByField("ReferralBound","user",t,a)).map(s=>this.create(s))}static async getByReferrer(t,a){return(await store.getByField("ReferralBound","referrer",t,a)).map(s=>this.create(s))}static async getByFields(t,a){return(await store.getByFields("ReferralBound",t,a)).map(s=>this.create(s))}static create(t){(0,f.default)(t.id!==void 0&&t.id!==null,"id must be provided");let a=new this(t.id,t.user,t.referrer);return Object.assign(a,t),a}};var w=n(require("assert")),y=class{constructor(t,a,r,s){this.id=t,this.contractAddress=a,this.opType=r,this.amount=s}get _name(){return"RemoteBalanceUpdated"}async save(){let t=this.id;(0,w.default)(t!==null,"Cannot save RemoteBalanceUpdated entity without an ID"),await store.set("RemoteBalanceUpdated",t.toString(),this)}static async remove(t){(0,w.default)(t!==null,"Cannot remove RemoteBalanceUpdated entity without an ID"),await store.remove("RemoteBalanceUpdated",t.toString())}static async get(t){(0,w.default)(t!=null,"Cannot get RemoteBalanceUpdated entity without an ID");let a=await store.get("RemoteBalanceUpdated",t.toString());if(a)return this.create(a)}static async getByFields(t,a){return(await store.getByFields("RemoteBalanceUpdated",t,a)).map(s=>this.create(s))}static create(t){(0,w.default)(t.id!==void 0&&t.id!==null,"id must be provided");let a=new this(t.id,t.contractAddress,t.opType,t.amount);return Object.assign(a,t),a}};var h=n(require("assert")),P=class{constructor(t,a,r){this.id=t,this.contractAddress=a,this.newBalance=r}get _name(){return"RiskBalanceUpdated"}async save(){let t=this.id;(0,h.default)(t!==null,"Cannot save RiskBalanceUpdated entity without an ID"),await store.set("RiskBalanceUpdated",t.toString(),this)}static async remove(t){(0,h.default)(t!==null,"Cannot remove RiskBalanceUpdated entity without an ID"),await store.remove("RiskBalanceUpdated",t.toString())}static async get(t){(0,h.default)(t!=null,"Cannot get RiskBalanceUpdated entity without an ID");let a=await store.get("RiskBalanceUpdated",t.toString());if(a)return this.create(a)}static async getByFields(t,a){return(await store.getByFields("RiskBalanceUpdated",t,a)).map(s=>this.create(s))}static create(t){(0,h.default)(t.id!==void 0&&t.id!==null,"id must be provided");let a=new this(t.id,t.contractAddress,t.newBalance);return Object.assign(a,t),a}};var B=n(require("assert")),v=class{constructor(t,a,r,s){this.id=t,this.contractAddress=a,this.to=r,this.amount=s}get _name(){return"UsdVaultWithdraw"}async save(){let t=this.id;(0,B.default)(t!==null,"Cannot save UsdVaultWithdraw entity without an ID"),await store.set("UsdVaultWithdraw",t.toString(),this)}static async remove(t){(0,B.default)(t!==null,"Cannot remove UsdVaultWithdraw entity without an ID"),await store.remove("UsdVaultWithdraw",t.toString())}static async get(t){(0,B.default)(t!=null,"Cannot get UsdVaultWithdraw entity without an ID");let a=await store.get("UsdVaultWithdraw",t.toString());if(a)return this.create(a)}static async getByTo(t,a){return(await store.getByField("UsdVaultWithdraw","to",t,a)).map(s=>this.create(s))}static async getByFields(t,a){return(await store.getByFields("UsdVaultWithdraw",t,a)).map(s=>this.create(s))}static create(t){(0,B.default)(t.id!==void 0&&t.id!==null,"id must be provided");let a=new this(t.id,t.contractAddress,t.to,t.amount);return Object.assign(a,t),a}};var N=n(require("assert"));async function D(e){logger.info(`New transfer transaction log at block ${e.blockNumber}`),(0,N.default)(e.args,"No log.args"),await d.create({id:e.transactionHash,blockHeight:BigInt(e.blockNumber),to:e.args.to,from:e.args.from,value:e.args.value.toBigInt(),contractAddress:e.address}).save()}async function _(e){logger.info(`New Approval transaction at block ${e.blockNumber}`),(0,N.default)(e.args,"No tx.args"),await l.create({id:e.hash,owner:e.from,spender:await e.args[0],value:BigInt(await e.args[1].toString()),contractAddress:e.to||""}).save()}var R=n(require("assert"));async function H(e){logger.info(`New staked transaction log at block ${e.blockNumber}`),(0,R.default)(e.args,"No staked.args"),await m.create({id:e.transactionHash,pool:e.address,blockHeight:BigInt(e.blockNumber),staker:e.args.staker,stakeToken:"0x000",stakeAmount:e.args.amount.toBigInt(),mintReceiver:e.args.receiver,mintAmount:e.args.minted.toBigInt(),timestamp:new Date(Number(e.transaction.blockTimestamp)*1e3)}).save();let a=`${e.address}-${e.args.staker}`,r=await o.get(a);r?(r.mintAmount=e.args.minted.toBigInt()+r.mintAmount,r.stakeAmount=e.args.amount.toBigInt()+r.stakeAmount):r=await o.create({id:a,pool:e.address,staker:e.args.staker,stakeAmount:e.args.amount.toBigInt(),mintAmount:e.args.minted.toBigInt()}),await r.save()}async function W(e){logger.info(`New unstake accepted transaction log at block ${e.blockNumber}`),(0,R.default)(e.args,"No unstake.args"),logger.info("unstake========================================"),logger.info(`unstake.address: ${e.address}`),logger.info(`unstake.blockNumber: ${e.blockNumber}`),logger.info(`unstake.transactionHash: ${e.transactionHash}`),logger.info(`unstake.transaction.blockTimestamp: ${e.transaction.blockTimestamp}`),logger.info(`unstake.args.accept_id: ${e.args.accept_id}`),logger.info(`unstake.args.staker: ${e.args.staker}`),logger.info(`unstake.args.receiver: ${e.args.receiver}`),logger.info(`unstake.args.unstake_amount: ${e.args.unstake_amount}`),logger.info(`unstake.args.redeem_earning: ${e.args.redeem_earning}`),logger.info(`unstake.args.withdraw_eth: ${e.args.withdraw_eth}`),logger.info(`unstake.args.repay_usdc: ${e.args.repay_usdc}`),logger.info(`unstake.args: ${JSON.stringify(e.args)}`),logger.info(`unstake.args.accept_id: ${e.args.accept_id}`),logger.info("unstake========================================"),await i.create({id:e.args.accept_id.toString(),txHash:e.transactionHash,pool:e.address,blockHeight:BigInt(e.blockNumber),staker:e.args.staker,unstakeToken:e.address,unstakeAmount:e.args.unstake_amount.toBigInt(),redeemEarning:e.args.redeem_earning.toBigInt(),withdrawEth:e.args.withdraw_eth.toBigInt(),repayUsdc:e.args.repay_usdc.toBigInt(),status:"pending",timestamp:new Date(Number(e.transaction.blockTimestamp)*1e3)}).save()}async function V(e){logger.info(`New unstake finished transaction log at block ${e.blockNumber}`),(0,R.default)(e.args,"No finished.args");let t=await i.get(e.args.accept_id.toString());t&&t.status==="pending"&&(t.status="success",await t.save())}async function G(e){logger.info(`New referral bound transaction log at block ${e.blockNumber}`),(0,R.default)(e.args,"No referralBound.args"),logger.info("referralBound========================================"),logger.info(`referralBound.address: ${e.address}`),logger.info(`referralBound.blockNumber: ${e.blockNumber}`),logger.info(`referralBound.transactionHash: ${e.transactionHash}`),logger.info(`referralBound.transaction.blockTimestamp: ${e.transaction.blockTimestamp}`),logger.info(`referralBound.args.user: ${e.args.user}`),logger.info(`referralBound.args.referrer: ${e.args.referrer}`),logger.info("referralBound========================================"),await b.create({id:e.transactionHash,blockHeight:BigInt(e.blockNumber),user:e.args.user,referrer:e.args.referrer,timestamp:new Date(Number(e.transaction.blockTimestamp)*1e3)}).save()}var C=n(require("assert"));async function L(e){logger.info(`New remote balance updated transaction log at block ${e.blockNumber}`),(0,C.default)(e.args,"No remoteBalanceUpdated.args"),logger.info("remoteBalanceUpdated========================================"),logger.info(`remoteBalanceUpdated.address: ${e.address}`),logger.info(`remoteBalanceUpdated.blockNumber: ${e.blockNumber}`),logger.info(`remoteBalanceUpdated.transactionHash: ${e.transactionHash}`),logger.info(`remoteBalanceUpdated.transaction.blockTimestamp: ${e.transaction.blockTimestamp}`),logger.info(`remoteBalanceUpdated.args.op: ${e.args.op}`),logger.info(`remoteBalanceUpdated.args.amount: ${e.args.amount}`),logger.info("remoteBalanceUpdated========================================"),await y.create({id:e.transactionHash,blockHeight:BigInt(e.blockNumber),contractAddress:e.address,opType:e.args.op,amount:e.args.amount.toBigInt(),timestamp:new Date(Number(e.transaction.blockTimestamp)*1e3)}).save()}async function j(e){logger.info(`New risk balance updated transaction log at block ${e.blockNumber}`),(0,C.default)(e.args,"No riskBalanceUpdated.args"),logger.info("riskBalanceUpdated========================================"),logger.info(`riskBalanceUpdated.address: ${e.address}`),logger.info(`riskBalanceUpdated.blockNumber: ${e.blockNumber}`),logger.info(`riskBalanceUpdated.transactionHash: ${e.transactionHash}`),logger.info(`riskBalanceUpdated.transaction.blockTimestamp: ${e.transaction.blockTimestamp}`),logger.info(`riskBalanceUpdated.args.newBalance: ${e.args.newBalance}`),logger.info("riskBalanceUpdated========================================"),await P.create({id:e.transactionHash,blockHeight:BigInt(e.blockNumber),contractAddress:e.address,newBalance:e.args.newBalance.toBigInt(),timestamp:new Date(Number(e.transaction.blockTimestamp)*1e3)}).save()}async function J(e){logger.info(`New USD vault withdraw transaction log at block ${e.blockNumber}`),(0,C.default)(e.args,"No withdraw.args"),logger.info("withdraw========================================"),logger.info(`withdraw.address: ${e.address}`),logger.info(`withdraw.blockNumber: ${e.blockNumber}`),logger.info(`withdraw.transactionHash: ${e.transactionHash}`),logger.info(`withdraw.transaction.blockTimestamp: ${e.transaction.blockTimestamp}`),logger.info(`withdraw.args.to: ${e.args.to}`),logger.info(`withdraw.args.amount: ${e.args.amount}`),logger.info("withdraw========================================"),await v.create({id:e.transactionHash,blockHeight:BigInt(e.blockNumber),contractAddress:e.address,to:e.args.to,amount:e.args.amount.toBigInt(),timestamp:new Date(Number(e.transaction.blockTimestamp)*1e3)}).save()}0&&(module.exports={handleLog,handleReferralBoundLog,handleRemoteBalanceUpdatedLog,handleRiskBalanceUpdatedLog,handleStakedLog,handleTransaction,handleUnstakeAcceptedLog,handleUnstakeFinishedLog,handleUsdVaultWithdrawLog});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2luZGV4LnRzIiwgIi4uL3NyYy90eXBlcy9tb2RlbHMvVHJhbnNmZXIudHMiLCAiLi4vc3JjL3R5cGVzL21vZGVscy9BcHByb3ZhbC50cyIsICIuLi9zcmMvdHlwZXMvbW9kZWxzL1N0YWtlZFJlY29yZC50cyIsICIuLi9zcmMvdHlwZXMvbW9kZWxzL1N0YWtlci50cyIsICIuLi9zcmMvdHlwZXMvbW9kZWxzL1Vuc3Rha2VBY2NlcHRlZC50cyIsICIuLi9zcmMvdHlwZXMvbW9kZWxzL1JlZmVycmFsQm91bmQudHMiLCAiLi4vc3JjL3R5cGVzL21vZGVscy9SZW1vdGVCYWxhbmNlVXBkYXRlZC50cyIsICIuLi9zcmMvdHlwZXMvbW9kZWxzL1Jpc2tCYWxhbmNlVXBkYXRlZC50cyIsICIuLi9zcmMvdHlwZXMvbW9kZWxzL1VzZFZhdWx0V2l0aGRyYXcudHMiLCAiLi4vc3JjL21hcHBpbmdzL2VyYzIwSGFuZGxlcnMudHMiLCAiLi4vc3JjL21hcHBpbmdzL3NzRVRISGFuZGxlcnMudHMiLCAiLi4vc3JjL21hcHBpbmdzL3VzZFZhdWx0SGFuZGxlcnMudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8vRXhwb3J0cyBhbGwgaGFuZGxlciBmdW5jdGlvbnNcbmV4cG9ydCAqIGZyb20gXCIuL21hcHBpbmdzL2VyYzIwSGFuZGxlcnNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21hcHBpbmdzL3NzRVRISGFuZGxlcnNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21hcHBpbmdzL3VzZFZhdWx0SGFuZGxlcnNcIjtcbiIsICIvLyBBdXRvLWdlbmVyYXRlZCAsIERPIE5PVCBFRElUXG5pbXBvcnQge0VudGl0eSwgRnVuY3Rpb25Qcm9wZXJ0eU5hbWVzLCBGaWVsZHNFeHByZXNzaW9uLCBHZXRPcHRpb25zIH0gZnJvbSBcIkBzdWJxbC90eXBlcy1jb3JlXCI7XG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5cblxuXG5leHBvcnQgdHlwZSBUcmFuc2ZlclByb3BzID0gT21pdDxUcmFuc2ZlciwgTm9uTnVsbGFibGU8RnVuY3Rpb25Qcm9wZXJ0eU5hbWVzPFRyYW5zZmVyPj4gfCAnX25hbWUnPjtcblxuLypcbiAqIENvbXBhdCB0eXBlcyBhbGxvd3MgZm9yIHN1cHBvcnQgb2YgYWx0ZXJuYXRpdmUgYGlkYCB0eXBlcyB3aXRob3V0IHJlZmFjdG9yaW5nIHRoZSBub2RlXG4gKi9cbnR5cGUgQ29tcGF0VHJhbnNmZXJQcm9wcyA9IE9taXQ8VHJhbnNmZXJQcm9wcywgJ2lkJz4gJiB7IGlkOiBzdHJpbmc7IH07XG50eXBlIENvbXBhdEVudGl0eSA9IE9taXQ8RW50aXR5LCAnaWQnPiAmIHsgaWQ6IHN0cmluZzsgfTtcblxuZXhwb3J0IGNsYXNzIFRyYW5zZmVyIGltcGxlbWVudHMgQ29tcGF0RW50aXR5IHtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBcbiAgICAgICAgaWQ6IHN0cmluZyxcbiAgICAgICAgdG86IHN0cmluZyxcbiAgICAgICAgZnJvbTogc3RyaW5nLFxuICAgICAgICB2YWx1ZTogYmlnaW50LFxuICAgICAgICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgICApIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnRvID0gdG87XG4gICAgICAgIHRoaXMuZnJvbSA9IGZyb207XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5jb250cmFjdEFkZHJlc3MgPSBjb250cmFjdEFkZHJlc3M7XG4gICAgICAgIFxuICAgIH1cblxuICAgIHB1YmxpYyBpZDogc3RyaW5nO1xuICAgIHB1YmxpYyBibG9ja0hlaWdodD86IGJpZ2ludDtcbiAgICBwdWJsaWMgdG86IHN0cmluZztcbiAgICBwdWJsaWMgZnJvbTogc3RyaW5nO1xuICAgIHB1YmxpYyB2YWx1ZTogYmlnaW50O1xuICAgIHB1YmxpYyBjb250cmFjdEFkZHJlc3M6IHN0cmluZztcbiAgICBcblxuICAgIGdldCBfbmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJ1RyYW5zZmVyJztcbiAgICB9XG5cbiAgICBhc3luYyBzYXZlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBpZCA9IHRoaXMuaWQ7XG4gICAgICAgIGFzc2VydChpZCAhPT0gbnVsbCwgXCJDYW5ub3Qgc2F2ZSBUcmFuc2ZlciBlbnRpdHkgd2l0aG91dCBhbiBJRFwiKTtcbiAgICAgICAgYXdhaXQgc3RvcmUuc2V0KCdUcmFuc2ZlcicsIGlkLnRvU3RyaW5nKCksIHRoaXMgYXMgdW5rbm93biBhcyBDb21wYXRUcmFuc2ZlclByb3BzKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgcmVtb3ZlKGlkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXNzZXJ0KGlkICE9PSBudWxsLCBcIkNhbm5vdCByZW1vdmUgVHJhbnNmZXIgZW50aXR5IHdpdGhvdXQgYW4gSURcIik7XG4gICAgICAgIGF3YWl0IHN0b3JlLnJlbW92ZSgnVHJhbnNmZXInLCBpZC50b1N0cmluZygpKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgZ2V0KGlkOiBzdHJpbmcpOiBQcm9taXNlPFRyYW5zZmVyIHwgdW5kZWZpbmVkPiB7XG4gICAgICAgIGFzc2VydCgoaWQgIT09IG51bGwgJiYgaWQgIT09IHVuZGVmaW5lZCksIFwiQ2Fubm90IGdldCBUcmFuc2ZlciBlbnRpdHkgd2l0aG91dCBhbiBJRFwiKTtcbiAgICAgICAgY29uc3QgcmVjb3JkID0gYXdhaXQgc3RvcmUuZ2V0KCdUcmFuc2ZlcicsIGlkLnRvU3RyaW5nKCkpO1xuICAgICAgICBpZiAocmVjb3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGUocmVjb3JkIGFzIHVua25vd24gYXMgVHJhbnNmZXJQcm9wcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEdldHMgZW50aXRpZXMgbWF0Y2hpbmcgdGhlIHNwZWNpZmllZCBmaWx0ZXJzIGFuZCBvcHRpb25zLlxuICAgICAqXG4gICAgICogXHUyNkEwXHVGRTBGIFRoaXMgZnVuY3Rpb24gd2lsbCBmaXJzdCBzZWFyY2ggY2FjaGUgZGF0YSBmb2xsb3dlZCBieSBEQiBkYXRhLiBQbGVhc2UgY29uc2lkZXIgdGhpcyB3aGVuIHVzaW5nIG9yZGVyIGFuZCBvZmZzZXQgb3B0aW9ucy5cdTI2QTBcdUZFMEZcbiAgICAgKiAqL1xuICAgIHN0YXRpYyBhc3luYyBnZXRCeUZpZWxkcyhmaWx0ZXI6IEZpZWxkc0V4cHJlc3Npb248VHJhbnNmZXJQcm9wcz5bXSwgb3B0aW9uczogR2V0T3B0aW9uczxUcmFuc2ZlclByb3BzPik6IFByb21pc2U8VHJhbnNmZXJbXT4ge1xuICAgICAgICBjb25zdCByZWNvcmRzID0gYXdhaXQgc3RvcmUuZ2V0QnlGaWVsZHM8Q29tcGF0VHJhbnNmZXJQcm9wcz4oJ1RyYW5zZmVyJywgZmlsdGVyICBhcyB1bmtub3duIGFzIEZpZWxkc0V4cHJlc3Npb248Q29tcGF0VHJhbnNmZXJQcm9wcz5bXSwgb3B0aW9ucyBhcyB1bmtub3duIGFzIEdldE9wdGlvbnM8Q29tcGF0VHJhbnNmZXJQcm9wcz4pO1xuICAgICAgICByZXR1cm4gcmVjb3Jkcy5tYXAocmVjb3JkID0+IHRoaXMuY3JlYXRlKHJlY29yZCBhcyB1bmtub3duIGFzIFRyYW5zZmVyUHJvcHMpKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgY3JlYXRlKHJlY29yZDogVHJhbnNmZXJQcm9wcyk6IFRyYW5zZmVyIHtcbiAgICAgICAgYXNzZXJ0KHJlY29yZC5pZCAhPT0gdW5kZWZpbmVkICYmIHJlY29yZC5pZCAhPT0gbnVsbCwgXCJpZCBtdXN0IGJlIHByb3ZpZGVkXCIpO1xuICAgICAgICBjb25zdCBlbnRpdHkgPSBuZXcgdGhpcyhcbiAgICAgICAgICAgIHJlY29yZC5pZCxcbiAgICAgICAgICAgIHJlY29yZC50byxcbiAgICAgICAgICAgIHJlY29yZC5mcm9tLFxuICAgICAgICAgICAgcmVjb3JkLnZhbHVlLFxuICAgICAgICAgICAgcmVjb3JkLmNvbnRyYWN0QWRkcmVzcyxcbiAgICAgICAgKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihlbnRpdHkscmVjb3JkKTtcbiAgICAgICAgcmV0dXJuIGVudGl0eTtcbiAgICB9XG59XG4iLCAiLy8gQXV0by1nZW5lcmF0ZWQgLCBETyBOT1QgRURJVFxuaW1wb3J0IHtFbnRpdHksIEZ1bmN0aW9uUHJvcGVydHlOYW1lcywgRmllbGRzRXhwcmVzc2lvbiwgR2V0T3B0aW9ucyB9IGZyb20gXCJAc3VicWwvdHlwZXMtY29yZVwiO1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuXG5cblxuZXhwb3J0IHR5cGUgQXBwcm92YWxQcm9wcyA9IE9taXQ8QXBwcm92YWwsIE5vbk51bGxhYmxlPEZ1bmN0aW9uUHJvcGVydHlOYW1lczxBcHByb3ZhbD4+IHwgJ19uYW1lJz47XG5cbi8qXG4gKiBDb21wYXQgdHlwZXMgYWxsb3dzIGZvciBzdXBwb3J0IG9mIGFsdGVybmF0aXZlIGBpZGAgdHlwZXMgd2l0aG91dCByZWZhY3RvcmluZyB0aGUgbm9kZVxuICovXG50eXBlIENvbXBhdEFwcHJvdmFsUHJvcHMgPSBPbWl0PEFwcHJvdmFsUHJvcHMsICdpZCc+ICYgeyBpZDogc3RyaW5nOyB9O1xudHlwZSBDb21wYXRFbnRpdHkgPSBPbWl0PEVudGl0eSwgJ2lkJz4gJiB7IGlkOiBzdHJpbmc7IH07XG5cbmV4cG9ydCBjbGFzcyBBcHByb3ZhbCBpbXBsZW1lbnRzIENvbXBhdEVudGl0eSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgXG4gICAgICAgIGlkOiBzdHJpbmcsXG4gICAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgICAgdmFsdWU6IGJpZ2ludCxcbiAgICAgICAgY29udHJhY3RBZGRyZXNzOiBzdHJpbmcsXG4gICAgKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5vd25lciA9IG93bmVyO1xuICAgICAgICB0aGlzLnNwZW5kZXIgPSBzcGVuZGVyO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuY29udHJhY3RBZGRyZXNzID0gY29udHJhY3RBZGRyZXNzO1xuICAgICAgICBcbiAgICB9XG5cbiAgICBwdWJsaWMgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgYmxvY2tIZWlnaHQ/OiBiaWdpbnQ7XG4gICAgcHVibGljIG93bmVyOiBzdHJpbmc7XG4gICAgcHVibGljIHNwZW5kZXI6IHN0cmluZztcbiAgICBwdWJsaWMgdmFsdWU6IGJpZ2ludDtcbiAgICBwdWJsaWMgY29udHJhY3RBZGRyZXNzOiBzdHJpbmc7XG4gICAgXG5cbiAgICBnZXQgX25hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICdBcHByb3ZhbCc7XG4gICAgfVxuXG4gICAgYXN5bmMgc2F2ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLmlkO1xuICAgICAgICBhc3NlcnQoaWQgIT09IG51bGwsIFwiQ2Fubm90IHNhdmUgQXBwcm92YWwgZW50aXR5IHdpdGhvdXQgYW4gSURcIik7XG4gICAgICAgIGF3YWl0IHN0b3JlLnNldCgnQXBwcm92YWwnLCBpZC50b1N0cmluZygpLCB0aGlzIGFzIHVua25vd24gYXMgQ29tcGF0QXBwcm92YWxQcm9wcyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIHJlbW92ZShpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGFzc2VydChpZCAhPT0gbnVsbCwgXCJDYW5ub3QgcmVtb3ZlIEFwcHJvdmFsIGVudGl0eSB3aXRob3V0IGFuIElEXCIpO1xuICAgICAgICBhd2FpdCBzdG9yZS5yZW1vdmUoJ0FwcHJvdmFsJywgaWQudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIGdldChpZDogc3RyaW5nKTogUHJvbWlzZTxBcHByb3ZhbCB8IHVuZGVmaW5lZD4ge1xuICAgICAgICBhc3NlcnQoKGlkICE9PSBudWxsICYmIGlkICE9PSB1bmRlZmluZWQpLCBcIkNhbm5vdCBnZXQgQXBwcm92YWwgZW50aXR5IHdpdGhvdXQgYW4gSURcIik7XG4gICAgICAgIGNvbnN0IHJlY29yZCA9IGF3YWl0IHN0b3JlLmdldCgnQXBwcm92YWwnLCBpZC50b1N0cmluZygpKTtcbiAgICAgICAgaWYgKHJlY29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHJlY29yZCBhcyB1bmtub3duIGFzIEFwcHJvdmFsUHJvcHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGVudGl0aWVzIG1hdGNoaW5nIHRoZSBzcGVjaWZpZWQgZmlsdGVycyBhbmQgb3B0aW9ucy5cbiAgICAgKlxuICAgICAqIFx1MjZBMFx1RkUwRiBUaGlzIGZ1bmN0aW9uIHdpbGwgZmlyc3Qgc2VhcmNoIGNhY2hlIGRhdGEgZm9sbG93ZWQgYnkgREIgZGF0YS4gUGxlYXNlIGNvbnNpZGVyIHRoaXMgd2hlbiB1c2luZyBvcmRlciBhbmQgb2Zmc2V0IG9wdGlvbnMuXHUyNkEwXHVGRTBGXG4gICAgICogKi9cbiAgICBzdGF0aWMgYXN5bmMgZ2V0QnlGaWVsZHMoZmlsdGVyOiBGaWVsZHNFeHByZXNzaW9uPEFwcHJvdmFsUHJvcHM+W10sIG9wdGlvbnM6IEdldE9wdGlvbnM8QXBwcm92YWxQcm9wcz4pOiBQcm9taXNlPEFwcHJvdmFsW10+IHtcbiAgICAgICAgY29uc3QgcmVjb3JkcyA9IGF3YWl0IHN0b3JlLmdldEJ5RmllbGRzPENvbXBhdEFwcHJvdmFsUHJvcHM+KCdBcHByb3ZhbCcsIGZpbHRlciAgYXMgdW5rbm93biBhcyBGaWVsZHNFeHByZXNzaW9uPENvbXBhdEFwcHJvdmFsUHJvcHM+W10sIG9wdGlvbnMgYXMgdW5rbm93biBhcyBHZXRPcHRpb25zPENvbXBhdEFwcHJvdmFsUHJvcHM+KTtcbiAgICAgICAgcmV0dXJuIHJlY29yZHMubWFwKHJlY29yZCA9PiB0aGlzLmNyZWF0ZShyZWNvcmQgYXMgdW5rbm93biBhcyBBcHByb3ZhbFByb3BzKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZShyZWNvcmQ6IEFwcHJvdmFsUHJvcHMpOiBBcHByb3ZhbCB7XG4gICAgICAgIGFzc2VydChyZWNvcmQuaWQgIT09IHVuZGVmaW5lZCAmJiByZWNvcmQuaWQgIT09IG51bGwsIFwiaWQgbXVzdCBiZSBwcm92aWRlZFwiKTtcbiAgICAgICAgY29uc3QgZW50aXR5ID0gbmV3IHRoaXMoXG4gICAgICAgICAgICByZWNvcmQuaWQsXG4gICAgICAgICAgICByZWNvcmQub3duZXIsXG4gICAgICAgICAgICByZWNvcmQuc3BlbmRlcixcbiAgICAgICAgICAgIHJlY29yZC52YWx1ZSxcbiAgICAgICAgICAgIHJlY29yZC5jb250cmFjdEFkZHJlc3MsXG4gICAgICAgICk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZW50aXR5LHJlY29yZCk7XG4gICAgICAgIHJldHVybiBlbnRpdHk7XG4gICAgfVxufVxuIiwgIi8vIEF1dG8tZ2VuZXJhdGVkICwgRE8gTk9UIEVESVRcbmltcG9ydCB7RW50aXR5LCBGdW5jdGlvblByb3BlcnR5TmFtZXMsIEZpZWxkc0V4cHJlc3Npb24sIEdldE9wdGlvbnMgfSBmcm9tIFwiQHN1YnFsL3R5cGVzLWNvcmVcIjtcbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcblxuXG5cbmV4cG9ydCB0eXBlIFN0YWtlZFJlY29yZFByb3BzID0gT21pdDxTdGFrZWRSZWNvcmQsIE5vbk51bGxhYmxlPEZ1bmN0aW9uUHJvcGVydHlOYW1lczxTdGFrZWRSZWNvcmQ+PiB8ICdfbmFtZSc+O1xuXG4vKlxuICogQ29tcGF0IHR5cGVzIGFsbG93cyBmb3Igc3VwcG9ydCBvZiBhbHRlcm5hdGl2ZSBgaWRgIHR5cGVzIHdpdGhvdXQgcmVmYWN0b3JpbmcgdGhlIG5vZGVcbiAqL1xudHlwZSBDb21wYXRTdGFrZWRSZWNvcmRQcm9wcyA9IE9taXQ8U3Rha2VkUmVjb3JkUHJvcHMsICdpZCc+ICYgeyBpZDogc3RyaW5nOyB9O1xudHlwZSBDb21wYXRFbnRpdHkgPSBPbWl0PEVudGl0eSwgJ2lkJz4gJiB7IGlkOiBzdHJpbmc7IH07XG5cbmV4cG9ydCBjbGFzcyBTdGFrZWRSZWNvcmQgaW1wbGVtZW50cyBDb21wYXRFbnRpdHkge1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIFxuICAgICAgICBpZDogc3RyaW5nLFxuICAgICkge1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIFxuICAgIH1cblxuICAgIHB1YmxpYyBpZDogc3RyaW5nO1xuICAgIHB1YmxpYyBwb29sPzogc3RyaW5nO1xuICAgIHB1YmxpYyBibG9ja0hlaWdodD86IGJpZ2ludDtcbiAgICBwdWJsaWMgc3Rha2VyPzogc3RyaW5nO1xuICAgIHB1YmxpYyBzdGFrZVRva2VuPzogc3RyaW5nO1xuICAgIHB1YmxpYyBzdGFrZUFtb3VudD86IGJpZ2ludDtcbiAgICBwdWJsaWMgbWludFJlY2VpdmVyPzogc3RyaW5nO1xuICAgIHB1YmxpYyBtaW50VG9rZW4/OiBzdHJpbmc7XG4gICAgcHVibGljIG1pbnRBbW91bnQ/OiBiaWdpbnQ7XG4gICAgcHVibGljIHRpbWVzdGFtcD86IERhdGU7XG4gICAgXG5cbiAgICBnZXQgX25hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICdTdGFrZWRSZWNvcmQnO1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5pZDtcbiAgICAgICAgYXNzZXJ0KGlkICE9PSBudWxsLCBcIkNhbm5vdCBzYXZlIFN0YWtlZFJlY29yZCBlbnRpdHkgd2l0aG91dCBhbiBJRFwiKTtcbiAgICAgICAgYXdhaXQgc3RvcmUuc2V0KCdTdGFrZWRSZWNvcmQnLCBpZC50b1N0cmluZygpLCB0aGlzIGFzIHVua25vd24gYXMgQ29tcGF0U3Rha2VkUmVjb3JkUHJvcHMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBhc3luYyByZW1vdmUoaWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhc3NlcnQoaWQgIT09IG51bGwsIFwiQ2Fubm90IHJlbW92ZSBTdGFrZWRSZWNvcmQgZW50aXR5IHdpdGhvdXQgYW4gSURcIik7XG4gICAgICAgIGF3YWl0IHN0b3JlLnJlbW92ZSgnU3Rha2VkUmVjb3JkJywgaWQudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIGdldChpZDogc3RyaW5nKTogUHJvbWlzZTxTdGFrZWRSZWNvcmQgfCB1bmRlZmluZWQ+IHtcbiAgICAgICAgYXNzZXJ0KChpZCAhPT0gbnVsbCAmJiBpZCAhPT0gdW5kZWZpbmVkKSwgXCJDYW5ub3QgZ2V0IFN0YWtlZFJlY29yZCBlbnRpdHkgd2l0aG91dCBhbiBJRFwiKTtcbiAgICAgICAgY29uc3QgcmVjb3JkID0gYXdhaXQgc3RvcmUuZ2V0KCdTdGFrZWRSZWNvcmQnLCBpZC50b1N0cmluZygpKTtcbiAgICAgICAgaWYgKHJlY29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHJlY29yZCBhcyB1bmtub3duIGFzIFN0YWtlZFJlY29yZFByb3BzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogR2V0cyBlbnRpdGllcyBtYXRjaGluZyB0aGUgc3BlY2lmaWVkIGZpbHRlcnMgYW5kIG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBcdTI2QTBcdUZFMEYgVGhpcyBmdW5jdGlvbiB3aWxsIGZpcnN0IHNlYXJjaCBjYWNoZSBkYXRhIGZvbGxvd2VkIGJ5IERCIGRhdGEuIFBsZWFzZSBjb25zaWRlciB0aGlzIHdoZW4gdXNpbmcgb3JkZXIgYW5kIG9mZnNldCBvcHRpb25zLlx1MjZBMFx1RkUwRlxuICAgICAqICovXG4gICAgc3RhdGljIGFzeW5jIGdldEJ5RmllbGRzKGZpbHRlcjogRmllbGRzRXhwcmVzc2lvbjxTdGFrZWRSZWNvcmRQcm9wcz5bXSwgb3B0aW9uczogR2V0T3B0aW9uczxTdGFrZWRSZWNvcmRQcm9wcz4pOiBQcm9taXNlPFN0YWtlZFJlY29yZFtdPiB7XG4gICAgICAgIGNvbnN0IHJlY29yZHMgPSBhd2FpdCBzdG9yZS5nZXRCeUZpZWxkczxDb21wYXRTdGFrZWRSZWNvcmRQcm9wcz4oJ1N0YWtlZFJlY29yZCcsIGZpbHRlciAgYXMgdW5rbm93biBhcyBGaWVsZHNFeHByZXNzaW9uPENvbXBhdFN0YWtlZFJlY29yZFByb3BzPltdLCBvcHRpb25zIGFzIHVua25vd24gYXMgR2V0T3B0aW9uczxDb21wYXRTdGFrZWRSZWNvcmRQcm9wcz4pO1xuICAgICAgICByZXR1cm4gcmVjb3Jkcy5tYXAocmVjb3JkID0+IHRoaXMuY3JlYXRlKHJlY29yZCBhcyB1bmtub3duIGFzIFN0YWtlZFJlY29yZFByb3BzKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZShyZWNvcmQ6IFN0YWtlZFJlY29yZFByb3BzKTogU3Rha2VkUmVjb3JkIHtcbiAgICAgICAgYXNzZXJ0KHJlY29yZC5pZCAhPT0gdW5kZWZpbmVkICYmIHJlY29yZC5pZCAhPT0gbnVsbCwgXCJpZCBtdXN0IGJlIHByb3ZpZGVkXCIpO1xuICAgICAgICBjb25zdCBlbnRpdHkgPSBuZXcgdGhpcyhcbiAgICAgICAgICAgIHJlY29yZC5pZCxcbiAgICAgICAgKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihlbnRpdHkscmVjb3JkKTtcbiAgICAgICAgcmV0dXJuIGVudGl0eTtcbiAgICB9XG59XG4iLCAiLy8gQXV0by1nZW5lcmF0ZWQgLCBETyBOT1QgRURJVFxuaW1wb3J0IHtFbnRpdHksIEZ1bmN0aW9uUHJvcGVydHlOYW1lcywgRmllbGRzRXhwcmVzc2lvbiwgR2V0T3B0aW9ucyB9IGZyb20gXCJAc3VicWwvdHlwZXMtY29yZVwiO1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuXG5cblxuZXhwb3J0IHR5cGUgU3Rha2VyUHJvcHMgPSBPbWl0PFN0YWtlciwgTm9uTnVsbGFibGU8RnVuY3Rpb25Qcm9wZXJ0eU5hbWVzPFN0YWtlcj4+IHwgJ19uYW1lJz47XG5cbi8qXG4gKiBDb21wYXQgdHlwZXMgYWxsb3dzIGZvciBzdXBwb3J0IG9mIGFsdGVybmF0aXZlIGBpZGAgdHlwZXMgd2l0aG91dCByZWZhY3RvcmluZyB0aGUgbm9kZVxuICovXG50eXBlIENvbXBhdFN0YWtlclByb3BzID0gT21pdDxTdGFrZXJQcm9wcywgJ2lkJz4gJiB7IGlkOiBzdHJpbmc7IH07XG50eXBlIENvbXBhdEVudGl0eSA9IE9taXQ8RW50aXR5LCAnaWQnPiAmIHsgaWQ6IHN0cmluZzsgfTtcblxuZXhwb3J0IGNsYXNzIFN0YWtlciBpbXBsZW1lbnRzIENvbXBhdEVudGl0eSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgXG4gICAgICAgIGlkOiBzdHJpbmcsXG4gICAgKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgcHVibGljIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHBvb2w/OiBzdHJpbmc7XG4gICAgcHVibGljIHN0YWtlcj86IHN0cmluZztcbiAgICBwdWJsaWMgc3Rha2VBbW91bnQ/OiBiaWdpbnQ7XG4gICAgcHVibGljIG1pbnRBbW91bnQ/OiBiaWdpbnQ7XG4gICAgXG5cbiAgICBnZXQgX25hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICdTdGFrZXInO1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5pZDtcbiAgICAgICAgYXNzZXJ0KGlkICE9PSBudWxsLCBcIkNhbm5vdCBzYXZlIFN0YWtlciBlbnRpdHkgd2l0aG91dCBhbiBJRFwiKTtcbiAgICAgICAgYXdhaXQgc3RvcmUuc2V0KCdTdGFrZXInLCBpZC50b1N0cmluZygpLCB0aGlzIGFzIHVua25vd24gYXMgQ29tcGF0U3Rha2VyUHJvcHMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBhc3luYyByZW1vdmUoaWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhc3NlcnQoaWQgIT09IG51bGwsIFwiQ2Fubm90IHJlbW92ZSBTdGFrZXIgZW50aXR5IHdpdGhvdXQgYW4gSURcIik7XG4gICAgICAgIGF3YWl0IHN0b3JlLnJlbW92ZSgnU3Rha2VyJywgaWQudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIGdldChpZDogc3RyaW5nKTogUHJvbWlzZTxTdGFrZXIgfCB1bmRlZmluZWQ+IHtcbiAgICAgICAgYXNzZXJ0KChpZCAhPT0gbnVsbCAmJiBpZCAhPT0gdW5kZWZpbmVkKSwgXCJDYW5ub3QgZ2V0IFN0YWtlciBlbnRpdHkgd2l0aG91dCBhbiBJRFwiKTtcbiAgICAgICAgY29uc3QgcmVjb3JkID0gYXdhaXQgc3RvcmUuZ2V0KCdTdGFrZXInLCBpZC50b1N0cmluZygpKTtcbiAgICAgICAgaWYgKHJlY29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHJlY29yZCBhcyB1bmtub3duIGFzIFN0YWtlclByb3BzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogR2V0cyBlbnRpdGllcyBtYXRjaGluZyB0aGUgc3BlY2lmaWVkIGZpbHRlcnMgYW5kIG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBcdTI2QTBcdUZFMEYgVGhpcyBmdW5jdGlvbiB3aWxsIGZpcnN0IHNlYXJjaCBjYWNoZSBkYXRhIGZvbGxvd2VkIGJ5IERCIGRhdGEuIFBsZWFzZSBjb25zaWRlciB0aGlzIHdoZW4gdXNpbmcgb3JkZXIgYW5kIG9mZnNldCBvcHRpb25zLlx1MjZBMFx1RkUwRlxuICAgICAqICovXG4gICAgc3RhdGljIGFzeW5jIGdldEJ5RmllbGRzKGZpbHRlcjogRmllbGRzRXhwcmVzc2lvbjxTdGFrZXJQcm9wcz5bXSwgb3B0aW9uczogR2V0T3B0aW9uczxTdGFrZXJQcm9wcz4pOiBQcm9taXNlPFN0YWtlcltdPiB7XG4gICAgICAgIGNvbnN0IHJlY29yZHMgPSBhd2FpdCBzdG9yZS5nZXRCeUZpZWxkczxDb21wYXRTdGFrZXJQcm9wcz4oJ1N0YWtlcicsIGZpbHRlciAgYXMgdW5rbm93biBhcyBGaWVsZHNFeHByZXNzaW9uPENvbXBhdFN0YWtlclByb3BzPltdLCBvcHRpb25zIGFzIHVua25vd24gYXMgR2V0T3B0aW9uczxDb21wYXRTdGFrZXJQcm9wcz4pO1xuICAgICAgICByZXR1cm4gcmVjb3Jkcy5tYXAocmVjb3JkID0+IHRoaXMuY3JlYXRlKHJlY29yZCBhcyB1bmtub3duIGFzIFN0YWtlclByb3BzKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZShyZWNvcmQ6IFN0YWtlclByb3BzKTogU3Rha2VyIHtcbiAgICAgICAgYXNzZXJ0KHJlY29yZC5pZCAhPT0gdW5kZWZpbmVkICYmIHJlY29yZC5pZCAhPT0gbnVsbCwgXCJpZCBtdXN0IGJlIHByb3ZpZGVkXCIpO1xuICAgICAgICBjb25zdCBlbnRpdHkgPSBuZXcgdGhpcyhcbiAgICAgICAgICAgIHJlY29yZC5pZCxcbiAgICAgICAgKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihlbnRpdHkscmVjb3JkKTtcbiAgICAgICAgcmV0dXJuIGVudGl0eTtcbiAgICB9XG59XG4iLCAiLy8gQXV0by1nZW5lcmF0ZWQgLCBETyBOT1QgRURJVFxuaW1wb3J0IHtFbnRpdHksIEZ1bmN0aW9uUHJvcGVydHlOYW1lcywgRmllbGRzRXhwcmVzc2lvbiwgR2V0T3B0aW9ucyB9IGZyb20gXCJAc3VicWwvdHlwZXMtY29yZVwiO1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuXG5cblxuZXhwb3J0IHR5cGUgVW5zdGFrZUFjY2VwdGVkUHJvcHMgPSBPbWl0PFVuc3Rha2VBY2NlcHRlZCwgTm9uTnVsbGFibGU8RnVuY3Rpb25Qcm9wZXJ0eU5hbWVzPFVuc3Rha2VBY2NlcHRlZD4+IHwgJ19uYW1lJz47XG5cbi8qXG4gKiBDb21wYXQgdHlwZXMgYWxsb3dzIGZvciBzdXBwb3J0IG9mIGFsdGVybmF0aXZlIGBpZGAgdHlwZXMgd2l0aG91dCByZWZhY3RvcmluZyB0aGUgbm9kZVxuICovXG50eXBlIENvbXBhdFVuc3Rha2VBY2NlcHRlZFByb3BzID0gT21pdDxVbnN0YWtlQWNjZXB0ZWRQcm9wcywgJ2lkJz4gJiB7IGlkOiBzdHJpbmc7IH07XG50eXBlIENvbXBhdEVudGl0eSA9IE9taXQ8RW50aXR5LCAnaWQnPiAmIHsgaWQ6IHN0cmluZzsgfTtcblxuZXhwb3J0IGNsYXNzIFVuc3Rha2VBY2NlcHRlZCBpbXBsZW1lbnRzIENvbXBhdEVudGl0eSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgXG4gICAgICAgIGlkOiBzdHJpbmcsXG4gICAgKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgcHVibGljIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIHR4SGFzaD86IHN0cmluZztcbiAgICBwdWJsaWMgcG9vbD86IHN0cmluZztcbiAgICBwdWJsaWMgYmxvY2tIZWlnaHQ/OiBiaWdpbnQ7XG4gICAgcHVibGljIHN0YWtlcj86IHN0cmluZztcbiAgICBwdWJsaWMgdW5zdGFrZVRva2VuPzogc3RyaW5nO1xuICAgIHB1YmxpYyB1bnN0YWtlQW1vdW50PzogYmlnaW50O1xuICAgIHB1YmxpYyByZWRlZW1FYXJuaW5nPzogYmlnaW50O1xuICAgIHB1YmxpYyB3aXRoZHJhd0V0aD86IGJpZ2ludDtcbiAgICBwdWJsaWMgcmVwYXlVc2RjPzogYmlnaW50O1xuICAgIHB1YmxpYyBzdGF0dXM/OiBzdHJpbmc7XG4gICAgcHVibGljIHRpbWVzdGFtcD86IERhdGU7XG4gICAgXG5cbiAgICBnZXQgX25hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICdVbnN0YWtlQWNjZXB0ZWQnO1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5pZDtcbiAgICAgICAgYXNzZXJ0KGlkICE9PSBudWxsLCBcIkNhbm5vdCBzYXZlIFVuc3Rha2VBY2NlcHRlZCBlbnRpdHkgd2l0aG91dCBhbiBJRFwiKTtcbiAgICAgICAgYXdhaXQgc3RvcmUuc2V0KCdVbnN0YWtlQWNjZXB0ZWQnLCBpZC50b1N0cmluZygpLCB0aGlzIGFzIHVua25vd24gYXMgQ29tcGF0VW5zdGFrZUFjY2VwdGVkUHJvcHMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBhc3luYyByZW1vdmUoaWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhc3NlcnQoaWQgIT09IG51bGwsIFwiQ2Fubm90IHJlbW92ZSBVbnN0YWtlQWNjZXB0ZWQgZW50aXR5IHdpdGhvdXQgYW4gSURcIik7XG4gICAgICAgIGF3YWl0IHN0b3JlLnJlbW92ZSgnVW5zdGFrZUFjY2VwdGVkJywgaWQudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIGdldChpZDogc3RyaW5nKTogUHJvbWlzZTxVbnN0YWtlQWNjZXB0ZWQgfCB1bmRlZmluZWQ+IHtcbiAgICAgICAgYXNzZXJ0KChpZCAhPT0gbnVsbCAmJiBpZCAhPT0gdW5kZWZpbmVkKSwgXCJDYW5ub3QgZ2V0IFVuc3Rha2VBY2NlcHRlZCBlbnRpdHkgd2l0aG91dCBhbiBJRFwiKTtcbiAgICAgICAgY29uc3QgcmVjb3JkID0gYXdhaXQgc3RvcmUuZ2V0KCdVbnN0YWtlQWNjZXB0ZWQnLCBpZC50b1N0cmluZygpKTtcbiAgICAgICAgaWYgKHJlY29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHJlY29yZCBhcyB1bmtub3duIGFzIFVuc3Rha2VBY2NlcHRlZFByb3BzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogR2V0cyBlbnRpdGllcyBtYXRjaGluZyB0aGUgc3BlY2lmaWVkIGZpbHRlcnMgYW5kIG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBcdTI2QTBcdUZFMEYgVGhpcyBmdW5jdGlvbiB3aWxsIGZpcnN0IHNlYXJjaCBjYWNoZSBkYXRhIGZvbGxvd2VkIGJ5IERCIGRhdGEuIFBsZWFzZSBjb25zaWRlciB0aGlzIHdoZW4gdXNpbmcgb3JkZXIgYW5kIG9mZnNldCBvcHRpb25zLlx1MjZBMFx1RkUwRlxuICAgICAqICovXG4gICAgc3RhdGljIGFzeW5jIGdldEJ5RmllbGRzKGZpbHRlcjogRmllbGRzRXhwcmVzc2lvbjxVbnN0YWtlQWNjZXB0ZWRQcm9wcz5bXSwgb3B0aW9uczogR2V0T3B0aW9uczxVbnN0YWtlQWNjZXB0ZWRQcm9wcz4pOiBQcm9taXNlPFVuc3Rha2VBY2NlcHRlZFtdPiB7XG4gICAgICAgIGNvbnN0IHJlY29yZHMgPSBhd2FpdCBzdG9yZS5nZXRCeUZpZWxkczxDb21wYXRVbnN0YWtlQWNjZXB0ZWRQcm9wcz4oJ1Vuc3Rha2VBY2NlcHRlZCcsIGZpbHRlciAgYXMgdW5rbm93biBhcyBGaWVsZHNFeHByZXNzaW9uPENvbXBhdFVuc3Rha2VBY2NlcHRlZFByb3BzPltdLCBvcHRpb25zIGFzIHVua25vd24gYXMgR2V0T3B0aW9uczxDb21wYXRVbnN0YWtlQWNjZXB0ZWRQcm9wcz4pO1xuICAgICAgICByZXR1cm4gcmVjb3Jkcy5tYXAocmVjb3JkID0+IHRoaXMuY3JlYXRlKHJlY29yZCBhcyB1bmtub3duIGFzIFVuc3Rha2VBY2NlcHRlZFByb3BzKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZShyZWNvcmQ6IFVuc3Rha2VBY2NlcHRlZFByb3BzKTogVW5zdGFrZUFjY2VwdGVkIHtcbiAgICAgICAgYXNzZXJ0KHJlY29yZC5pZCAhPT0gdW5kZWZpbmVkICYmIHJlY29yZC5pZCAhPT0gbnVsbCwgXCJpZCBtdXN0IGJlIHByb3ZpZGVkXCIpO1xuICAgICAgICBjb25zdCBlbnRpdHkgPSBuZXcgdGhpcyhcbiAgICAgICAgICAgIHJlY29yZC5pZCxcbiAgICAgICAgKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihlbnRpdHkscmVjb3JkKTtcbiAgICAgICAgcmV0dXJuIGVudGl0eTtcbiAgICB9XG59XG4iLCAiLy8gQXV0by1nZW5lcmF0ZWQgLCBETyBOT1QgRURJVFxuaW1wb3J0IHtFbnRpdHksIEZ1bmN0aW9uUHJvcGVydHlOYW1lcywgRmllbGRzRXhwcmVzc2lvbiwgR2V0T3B0aW9ucyB9IGZyb20gXCJAc3VicWwvdHlwZXMtY29yZVwiO1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuXG5cblxuZXhwb3J0IHR5cGUgUmVmZXJyYWxCb3VuZFByb3BzID0gT21pdDxSZWZlcnJhbEJvdW5kLCBOb25OdWxsYWJsZTxGdW5jdGlvblByb3BlcnR5TmFtZXM8UmVmZXJyYWxCb3VuZD4+IHwgJ19uYW1lJz47XG5cbi8qXG4gKiBDb21wYXQgdHlwZXMgYWxsb3dzIGZvciBzdXBwb3J0IG9mIGFsdGVybmF0aXZlIGBpZGAgdHlwZXMgd2l0aG91dCByZWZhY3RvcmluZyB0aGUgbm9kZVxuICovXG50eXBlIENvbXBhdFJlZmVycmFsQm91bmRQcm9wcyA9IE9taXQ8UmVmZXJyYWxCb3VuZFByb3BzLCAnaWQnPiAmIHsgaWQ6IHN0cmluZzsgfTtcbnR5cGUgQ29tcGF0RW50aXR5ID0gT21pdDxFbnRpdHksICdpZCc+ICYgeyBpZDogc3RyaW5nOyB9O1xuXG5leHBvcnQgY2xhc3MgUmVmZXJyYWxCb3VuZCBpbXBsZW1lbnRzIENvbXBhdEVudGl0eSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgXG4gICAgICAgIGlkOiBzdHJpbmcsXG4gICAgICAgIHVzZXI6IHN0cmluZyxcbiAgICAgICAgcmVmZXJyZXI6IHN0cmluZyxcbiAgICApIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnVzZXIgPSB1c2VyO1xuICAgICAgICB0aGlzLnJlZmVycmVyID0gcmVmZXJyZXI7XG4gICAgICAgIFxuICAgIH1cblxuICAgIHB1YmxpYyBpZDogc3RyaW5nO1xuICAgIHB1YmxpYyBibG9ja0hlaWdodD86IGJpZ2ludDtcbiAgICBwdWJsaWMgdXNlcjogc3RyaW5nO1xuICAgIHB1YmxpYyByZWZlcnJlcjogc3RyaW5nO1xuICAgIHB1YmxpYyB0aW1lc3RhbXA/OiBEYXRlO1xuICAgIFxuXG4gICAgZ2V0IF9uYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAnUmVmZXJyYWxCb3VuZCc7XG4gICAgfVxuXG4gICAgYXN5bmMgc2F2ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLmlkO1xuICAgICAgICBhc3NlcnQoaWQgIT09IG51bGwsIFwiQ2Fubm90IHNhdmUgUmVmZXJyYWxCb3VuZCBlbnRpdHkgd2l0aG91dCBhbiBJRFwiKTtcbiAgICAgICAgYXdhaXQgc3RvcmUuc2V0KCdSZWZlcnJhbEJvdW5kJywgaWQudG9TdHJpbmcoKSwgdGhpcyBhcyB1bmtub3duIGFzIENvbXBhdFJlZmVycmFsQm91bmRQcm9wcyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIHJlbW92ZShpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGFzc2VydChpZCAhPT0gbnVsbCwgXCJDYW5ub3QgcmVtb3ZlIFJlZmVycmFsQm91bmQgZW50aXR5IHdpdGhvdXQgYW4gSURcIik7XG4gICAgICAgIGF3YWl0IHN0b3JlLnJlbW92ZSgnUmVmZXJyYWxCb3VuZCcsIGlkLnRvU3RyaW5nKCkpO1xuICAgIH1cblxuICAgIHN0YXRpYyBhc3luYyBnZXQoaWQ6IHN0cmluZyk6IFByb21pc2U8UmVmZXJyYWxCb3VuZCB8IHVuZGVmaW5lZD4ge1xuICAgICAgICBhc3NlcnQoKGlkICE9PSBudWxsICYmIGlkICE9PSB1bmRlZmluZWQpLCBcIkNhbm5vdCBnZXQgUmVmZXJyYWxCb3VuZCBlbnRpdHkgd2l0aG91dCBhbiBJRFwiKTtcbiAgICAgICAgY29uc3QgcmVjb3JkID0gYXdhaXQgc3RvcmUuZ2V0KCdSZWZlcnJhbEJvdW5kJywgaWQudG9TdHJpbmcoKSk7XG4gICAgICAgIGlmIChyZWNvcmQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZShyZWNvcmQgYXMgdW5rbm93biBhcyBSZWZlcnJhbEJvdW5kUHJvcHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIGdldEJ5VXNlcih1c2VyOiBzdHJpbmcsIG9wdGlvbnM6IEdldE9wdGlvbnM8Q29tcGF0UmVmZXJyYWxCb3VuZFByb3BzPik6IFByb21pc2U8UmVmZXJyYWxCb3VuZFtdPiB7XG4gICAgICAgIC8vIElucHV0cyBtdXN0IGJlIGNhc3QgYXMgdGhlIHN0b3JlIGludGVyZmFjZSBoYXMgbm90IGJlZW4gdXBkYXRlZCB0byBzdXBwb3J0IGFsdGVybmF0aXZlIElEIHR5cGVzXG4gICAgICAgIGNvbnN0IHJlY29yZHMgPSBhd2FpdCBzdG9yZS5nZXRCeUZpZWxkPENvbXBhdFJlZmVycmFsQm91bmRQcm9wcz4oJ1JlZmVycmFsQm91bmQnLCAndXNlcicsIHVzZXIsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gcmVjb3Jkcy5tYXAocmVjb3JkID0+IHRoaXMuY3JlYXRlKHJlY29yZCBhcyB1bmtub3duIGFzIFJlZmVycmFsQm91bmRQcm9wcykpO1xuICAgIH1cbiAgICBcblxuICAgIHN0YXRpYyBhc3luYyBnZXRCeVJlZmVycmVyKHJlZmVycmVyOiBzdHJpbmcsIG9wdGlvbnM6IEdldE9wdGlvbnM8Q29tcGF0UmVmZXJyYWxCb3VuZFByb3BzPik6IFByb21pc2U8UmVmZXJyYWxCb3VuZFtdPiB7XG4gICAgICAgIC8vIElucHV0cyBtdXN0IGJlIGNhc3QgYXMgdGhlIHN0b3JlIGludGVyZmFjZSBoYXMgbm90IGJlZW4gdXBkYXRlZCB0byBzdXBwb3J0IGFsdGVybmF0aXZlIElEIHR5cGVzXG4gICAgICAgIGNvbnN0IHJlY29yZHMgPSBhd2FpdCBzdG9yZS5nZXRCeUZpZWxkPENvbXBhdFJlZmVycmFsQm91bmRQcm9wcz4oJ1JlZmVycmFsQm91bmQnLCAncmVmZXJyZXInLCByZWZlcnJlciwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiByZWNvcmRzLm1hcChyZWNvcmQgPT4gdGhpcy5jcmVhdGUocmVjb3JkIGFzIHVua25vd24gYXMgUmVmZXJyYWxCb3VuZFByb3BzKSk7XG4gICAgfVxuICAgIFxuXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGVudGl0aWVzIG1hdGNoaW5nIHRoZSBzcGVjaWZpZWQgZmlsdGVycyBhbmQgb3B0aW9ucy5cbiAgICAgKlxuICAgICAqIFx1MjZBMFx1RkUwRiBUaGlzIGZ1bmN0aW9uIHdpbGwgZmlyc3Qgc2VhcmNoIGNhY2hlIGRhdGEgZm9sbG93ZWQgYnkgREIgZGF0YS4gUGxlYXNlIGNvbnNpZGVyIHRoaXMgd2hlbiB1c2luZyBvcmRlciBhbmQgb2Zmc2V0IG9wdGlvbnMuXHUyNkEwXHVGRTBGXG4gICAgICogKi9cbiAgICBzdGF0aWMgYXN5bmMgZ2V0QnlGaWVsZHMoZmlsdGVyOiBGaWVsZHNFeHByZXNzaW9uPFJlZmVycmFsQm91bmRQcm9wcz5bXSwgb3B0aW9uczogR2V0T3B0aW9uczxSZWZlcnJhbEJvdW5kUHJvcHM+KTogUHJvbWlzZTxSZWZlcnJhbEJvdW5kW10+IHtcbiAgICAgICAgY29uc3QgcmVjb3JkcyA9IGF3YWl0IHN0b3JlLmdldEJ5RmllbGRzPENvbXBhdFJlZmVycmFsQm91bmRQcm9wcz4oJ1JlZmVycmFsQm91bmQnLCBmaWx0ZXIgIGFzIHVua25vd24gYXMgRmllbGRzRXhwcmVzc2lvbjxDb21wYXRSZWZlcnJhbEJvdW5kUHJvcHM+W10sIG9wdGlvbnMgYXMgdW5rbm93biBhcyBHZXRPcHRpb25zPENvbXBhdFJlZmVycmFsQm91bmRQcm9wcz4pO1xuICAgICAgICByZXR1cm4gcmVjb3Jkcy5tYXAocmVjb3JkID0+IHRoaXMuY3JlYXRlKHJlY29yZCBhcyB1bmtub3duIGFzIFJlZmVycmFsQm91bmRQcm9wcykpO1xuICAgIH1cblxuICAgIHN0YXRpYyBjcmVhdGUocmVjb3JkOiBSZWZlcnJhbEJvdW5kUHJvcHMpOiBSZWZlcnJhbEJvdW5kIHtcbiAgICAgICAgYXNzZXJ0KHJlY29yZC5pZCAhPT0gdW5kZWZpbmVkICYmIHJlY29yZC5pZCAhPT0gbnVsbCwgXCJpZCBtdXN0IGJlIHByb3ZpZGVkXCIpO1xuICAgICAgICBjb25zdCBlbnRpdHkgPSBuZXcgdGhpcyhcbiAgICAgICAgICAgIHJlY29yZC5pZCxcbiAgICAgICAgICAgIHJlY29yZC51c2VyLFxuICAgICAgICAgICAgcmVjb3JkLnJlZmVycmVyLFxuICAgICAgICApO1xuICAgICAgICBPYmplY3QuYXNzaWduKGVudGl0eSxyZWNvcmQpO1xuICAgICAgICByZXR1cm4gZW50aXR5O1xuICAgIH1cbn1cbiIsICIvLyBBdXRvLWdlbmVyYXRlZCAsIERPIE5PVCBFRElUXG5pbXBvcnQge0VudGl0eSwgRnVuY3Rpb25Qcm9wZXJ0eU5hbWVzLCBGaWVsZHNFeHByZXNzaW9uLCBHZXRPcHRpb25zIH0gZnJvbSBcIkBzdWJxbC90eXBlcy1jb3JlXCI7XG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5cblxuXG5leHBvcnQgdHlwZSBSZW1vdGVCYWxhbmNlVXBkYXRlZFByb3BzID0gT21pdDxSZW1vdGVCYWxhbmNlVXBkYXRlZCwgTm9uTnVsbGFibGU8RnVuY3Rpb25Qcm9wZXJ0eU5hbWVzPFJlbW90ZUJhbGFuY2VVcGRhdGVkPj4gfCAnX25hbWUnPjtcblxuLypcbiAqIENvbXBhdCB0eXBlcyBhbGxvd3MgZm9yIHN1cHBvcnQgb2YgYWx0ZXJuYXRpdmUgYGlkYCB0eXBlcyB3aXRob3V0IHJlZmFjdG9yaW5nIHRoZSBub2RlXG4gKi9cbnR5cGUgQ29tcGF0UmVtb3RlQmFsYW5jZVVwZGF0ZWRQcm9wcyA9IE9taXQ8UmVtb3RlQmFsYW5jZVVwZGF0ZWRQcm9wcywgJ2lkJz4gJiB7IGlkOiBzdHJpbmc7IH07XG50eXBlIENvbXBhdEVudGl0eSA9IE9taXQ8RW50aXR5LCAnaWQnPiAmIHsgaWQ6IHN0cmluZzsgfTtcblxuZXhwb3J0IGNsYXNzIFJlbW90ZUJhbGFuY2VVcGRhdGVkIGltcGxlbWVudHMgQ29tcGF0RW50aXR5IHtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBcbiAgICAgICAgaWQ6IHN0cmluZyxcbiAgICAgICAgY29udHJhY3RBZGRyZXNzOiBzdHJpbmcsXG4gICAgICAgIG9wVHlwZTogbnVtYmVyLFxuICAgICAgICBhbW91bnQ6IGJpZ2ludCxcbiAgICApIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmNvbnRyYWN0QWRkcmVzcyA9IGNvbnRyYWN0QWRkcmVzcztcbiAgICAgICAgdGhpcy5vcFR5cGUgPSBvcFR5cGU7XG4gICAgICAgIHRoaXMuYW1vdW50ID0gYW1vdW50O1xuICAgICAgICBcbiAgICB9XG5cbiAgICBwdWJsaWMgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgYmxvY2tIZWlnaHQ/OiBiaWdpbnQ7XG4gICAgcHVibGljIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nO1xuICAgIHB1YmxpYyBvcFR5cGU6IG51bWJlcjtcbiAgICBwdWJsaWMgYW1vdW50OiBiaWdpbnQ7XG4gICAgcHVibGljIHRpbWVzdGFtcD86IERhdGU7XG4gICAgXG5cbiAgICBnZXQgX25hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICdSZW1vdGVCYWxhbmNlVXBkYXRlZCc7XG4gICAgfVxuXG4gICAgYXN5bmMgc2F2ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLmlkO1xuICAgICAgICBhc3NlcnQoaWQgIT09IG51bGwsIFwiQ2Fubm90IHNhdmUgUmVtb3RlQmFsYW5jZVVwZGF0ZWQgZW50aXR5IHdpdGhvdXQgYW4gSURcIik7XG4gICAgICAgIGF3YWl0IHN0b3JlLnNldCgnUmVtb3RlQmFsYW5jZVVwZGF0ZWQnLCBpZC50b1N0cmluZygpLCB0aGlzIGFzIHVua25vd24gYXMgQ29tcGF0UmVtb3RlQmFsYW5jZVVwZGF0ZWRQcm9wcyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIHJlbW92ZShpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGFzc2VydChpZCAhPT0gbnVsbCwgXCJDYW5ub3QgcmVtb3ZlIFJlbW90ZUJhbGFuY2VVcGRhdGVkIGVudGl0eSB3aXRob3V0IGFuIElEXCIpO1xuICAgICAgICBhd2FpdCBzdG9yZS5yZW1vdmUoJ1JlbW90ZUJhbGFuY2VVcGRhdGVkJywgaWQudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIGdldChpZDogc3RyaW5nKTogUHJvbWlzZTxSZW1vdGVCYWxhbmNlVXBkYXRlZCB8IHVuZGVmaW5lZD4ge1xuICAgICAgICBhc3NlcnQoKGlkICE9PSBudWxsICYmIGlkICE9PSB1bmRlZmluZWQpLCBcIkNhbm5vdCBnZXQgUmVtb3RlQmFsYW5jZVVwZGF0ZWQgZW50aXR5IHdpdGhvdXQgYW4gSURcIik7XG4gICAgICAgIGNvbnN0IHJlY29yZCA9IGF3YWl0IHN0b3JlLmdldCgnUmVtb3RlQmFsYW5jZVVwZGF0ZWQnLCBpZC50b1N0cmluZygpKTtcbiAgICAgICAgaWYgKHJlY29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHJlY29yZCBhcyB1bmtub3duIGFzIFJlbW90ZUJhbGFuY2VVcGRhdGVkUHJvcHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGVudGl0aWVzIG1hdGNoaW5nIHRoZSBzcGVjaWZpZWQgZmlsdGVycyBhbmQgb3B0aW9ucy5cbiAgICAgKlxuICAgICAqIFx1MjZBMFx1RkUwRiBUaGlzIGZ1bmN0aW9uIHdpbGwgZmlyc3Qgc2VhcmNoIGNhY2hlIGRhdGEgZm9sbG93ZWQgYnkgREIgZGF0YS4gUGxlYXNlIGNvbnNpZGVyIHRoaXMgd2hlbiB1c2luZyBvcmRlciBhbmQgb2Zmc2V0IG9wdGlvbnMuXHUyNkEwXHVGRTBGXG4gICAgICogKi9cbiAgICBzdGF0aWMgYXN5bmMgZ2V0QnlGaWVsZHMoZmlsdGVyOiBGaWVsZHNFeHByZXNzaW9uPFJlbW90ZUJhbGFuY2VVcGRhdGVkUHJvcHM+W10sIG9wdGlvbnM6IEdldE9wdGlvbnM8UmVtb3RlQmFsYW5jZVVwZGF0ZWRQcm9wcz4pOiBQcm9taXNlPFJlbW90ZUJhbGFuY2VVcGRhdGVkW10+IHtcbiAgICAgICAgY29uc3QgcmVjb3JkcyA9IGF3YWl0IHN0b3JlLmdldEJ5RmllbGRzPENvbXBhdFJlbW90ZUJhbGFuY2VVcGRhdGVkUHJvcHM+KCdSZW1vdGVCYWxhbmNlVXBkYXRlZCcsIGZpbHRlciAgYXMgdW5rbm93biBhcyBGaWVsZHNFeHByZXNzaW9uPENvbXBhdFJlbW90ZUJhbGFuY2VVcGRhdGVkUHJvcHM+W10sIG9wdGlvbnMgYXMgdW5rbm93biBhcyBHZXRPcHRpb25zPENvbXBhdFJlbW90ZUJhbGFuY2VVcGRhdGVkUHJvcHM+KTtcbiAgICAgICAgcmV0dXJuIHJlY29yZHMubWFwKHJlY29yZCA9PiB0aGlzLmNyZWF0ZShyZWNvcmQgYXMgdW5rbm93biBhcyBSZW1vdGVCYWxhbmNlVXBkYXRlZFByb3BzKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZShyZWNvcmQ6IFJlbW90ZUJhbGFuY2VVcGRhdGVkUHJvcHMpOiBSZW1vdGVCYWxhbmNlVXBkYXRlZCB7XG4gICAgICAgIGFzc2VydChyZWNvcmQuaWQgIT09IHVuZGVmaW5lZCAmJiByZWNvcmQuaWQgIT09IG51bGwsIFwiaWQgbXVzdCBiZSBwcm92aWRlZFwiKTtcbiAgICAgICAgY29uc3QgZW50aXR5ID0gbmV3IHRoaXMoXG4gICAgICAgICAgICByZWNvcmQuaWQsXG4gICAgICAgICAgICByZWNvcmQuY29udHJhY3RBZGRyZXNzLFxuICAgICAgICAgICAgcmVjb3JkLm9wVHlwZSxcbiAgICAgICAgICAgIHJlY29yZC5hbW91bnQsXG4gICAgICAgICk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZW50aXR5LHJlY29yZCk7XG4gICAgICAgIHJldHVybiBlbnRpdHk7XG4gICAgfVxufVxuIiwgIi8vIEF1dG8tZ2VuZXJhdGVkICwgRE8gTk9UIEVESVRcbmltcG9ydCB7RW50aXR5LCBGdW5jdGlvblByb3BlcnR5TmFtZXMsIEZpZWxkc0V4cHJlc3Npb24sIEdldE9wdGlvbnMgfSBmcm9tIFwiQHN1YnFsL3R5cGVzLWNvcmVcIjtcbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcblxuXG5cbmV4cG9ydCB0eXBlIFJpc2tCYWxhbmNlVXBkYXRlZFByb3BzID0gT21pdDxSaXNrQmFsYW5jZVVwZGF0ZWQsIE5vbk51bGxhYmxlPEZ1bmN0aW9uUHJvcGVydHlOYW1lczxSaXNrQmFsYW5jZVVwZGF0ZWQ+PiB8ICdfbmFtZSc+O1xuXG4vKlxuICogQ29tcGF0IHR5cGVzIGFsbG93cyBmb3Igc3VwcG9ydCBvZiBhbHRlcm5hdGl2ZSBgaWRgIHR5cGVzIHdpdGhvdXQgcmVmYWN0b3JpbmcgdGhlIG5vZGVcbiAqL1xudHlwZSBDb21wYXRSaXNrQmFsYW5jZVVwZGF0ZWRQcm9wcyA9IE9taXQ8Umlza0JhbGFuY2VVcGRhdGVkUHJvcHMsICdpZCc+ICYgeyBpZDogc3RyaW5nOyB9O1xudHlwZSBDb21wYXRFbnRpdHkgPSBPbWl0PEVudGl0eSwgJ2lkJz4gJiB7IGlkOiBzdHJpbmc7IH07XG5cbmV4cG9ydCBjbGFzcyBSaXNrQmFsYW5jZVVwZGF0ZWQgaW1wbGVtZW50cyBDb21wYXRFbnRpdHkge1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIFxuICAgICAgICBpZDogc3RyaW5nLFxuICAgICAgICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgICAgICAgbmV3QmFsYW5jZTogYmlnaW50LFxuICAgICkge1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuY29udHJhY3RBZGRyZXNzID0gY29udHJhY3RBZGRyZXNzO1xuICAgICAgICB0aGlzLm5ld0JhbGFuY2UgPSBuZXdCYWxhbmNlO1xuICAgICAgICBcbiAgICB9XG5cbiAgICBwdWJsaWMgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgYmxvY2tIZWlnaHQ/OiBiaWdpbnQ7XG4gICAgcHVibGljIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nO1xuICAgIHB1YmxpYyBuZXdCYWxhbmNlOiBiaWdpbnQ7XG4gICAgcHVibGljIHRpbWVzdGFtcD86IERhdGU7XG4gICAgXG5cbiAgICBnZXQgX25hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICdSaXNrQmFsYW5jZVVwZGF0ZWQnO1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5pZDtcbiAgICAgICAgYXNzZXJ0KGlkICE9PSBudWxsLCBcIkNhbm5vdCBzYXZlIFJpc2tCYWxhbmNlVXBkYXRlZCBlbnRpdHkgd2l0aG91dCBhbiBJRFwiKTtcbiAgICAgICAgYXdhaXQgc3RvcmUuc2V0KCdSaXNrQmFsYW5jZVVwZGF0ZWQnLCBpZC50b1N0cmluZygpLCB0aGlzIGFzIHVua25vd24gYXMgQ29tcGF0Umlza0JhbGFuY2VVcGRhdGVkUHJvcHMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBhc3luYyByZW1vdmUoaWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhc3NlcnQoaWQgIT09IG51bGwsIFwiQ2Fubm90IHJlbW92ZSBSaXNrQmFsYW5jZVVwZGF0ZWQgZW50aXR5IHdpdGhvdXQgYW4gSURcIik7XG4gICAgICAgIGF3YWl0IHN0b3JlLnJlbW92ZSgnUmlza0JhbGFuY2VVcGRhdGVkJywgaWQudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIGdldChpZDogc3RyaW5nKTogUHJvbWlzZTxSaXNrQmFsYW5jZVVwZGF0ZWQgfCB1bmRlZmluZWQ+IHtcbiAgICAgICAgYXNzZXJ0KChpZCAhPT0gbnVsbCAmJiBpZCAhPT0gdW5kZWZpbmVkKSwgXCJDYW5ub3QgZ2V0IFJpc2tCYWxhbmNlVXBkYXRlZCBlbnRpdHkgd2l0aG91dCBhbiBJRFwiKTtcbiAgICAgICAgY29uc3QgcmVjb3JkID0gYXdhaXQgc3RvcmUuZ2V0KCdSaXNrQmFsYW5jZVVwZGF0ZWQnLCBpZC50b1N0cmluZygpKTtcbiAgICAgICAgaWYgKHJlY29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHJlY29yZCBhcyB1bmtub3duIGFzIFJpc2tCYWxhbmNlVXBkYXRlZFByb3BzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogR2V0cyBlbnRpdGllcyBtYXRjaGluZyB0aGUgc3BlY2lmaWVkIGZpbHRlcnMgYW5kIG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBcdTI2QTBcdUZFMEYgVGhpcyBmdW5jdGlvbiB3aWxsIGZpcnN0IHNlYXJjaCBjYWNoZSBkYXRhIGZvbGxvd2VkIGJ5IERCIGRhdGEuIFBsZWFzZSBjb25zaWRlciB0aGlzIHdoZW4gdXNpbmcgb3JkZXIgYW5kIG9mZnNldCBvcHRpb25zLlx1MjZBMFx1RkUwRlxuICAgICAqICovXG4gICAgc3RhdGljIGFzeW5jIGdldEJ5RmllbGRzKGZpbHRlcjogRmllbGRzRXhwcmVzc2lvbjxSaXNrQmFsYW5jZVVwZGF0ZWRQcm9wcz5bXSwgb3B0aW9uczogR2V0T3B0aW9uczxSaXNrQmFsYW5jZVVwZGF0ZWRQcm9wcz4pOiBQcm9taXNlPFJpc2tCYWxhbmNlVXBkYXRlZFtdPiB7XG4gICAgICAgIGNvbnN0IHJlY29yZHMgPSBhd2FpdCBzdG9yZS5nZXRCeUZpZWxkczxDb21wYXRSaXNrQmFsYW5jZVVwZGF0ZWRQcm9wcz4oJ1Jpc2tCYWxhbmNlVXBkYXRlZCcsIGZpbHRlciAgYXMgdW5rbm93biBhcyBGaWVsZHNFeHByZXNzaW9uPENvbXBhdFJpc2tCYWxhbmNlVXBkYXRlZFByb3BzPltdLCBvcHRpb25zIGFzIHVua25vd24gYXMgR2V0T3B0aW9uczxDb21wYXRSaXNrQmFsYW5jZVVwZGF0ZWRQcm9wcz4pO1xuICAgICAgICByZXR1cm4gcmVjb3Jkcy5tYXAocmVjb3JkID0+IHRoaXMuY3JlYXRlKHJlY29yZCBhcyB1bmtub3duIGFzIFJpc2tCYWxhbmNlVXBkYXRlZFByb3BzKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZShyZWNvcmQ6IFJpc2tCYWxhbmNlVXBkYXRlZFByb3BzKTogUmlza0JhbGFuY2VVcGRhdGVkIHtcbiAgICAgICAgYXNzZXJ0KHJlY29yZC5pZCAhPT0gdW5kZWZpbmVkICYmIHJlY29yZC5pZCAhPT0gbnVsbCwgXCJpZCBtdXN0IGJlIHByb3ZpZGVkXCIpO1xuICAgICAgICBjb25zdCBlbnRpdHkgPSBuZXcgdGhpcyhcbiAgICAgICAgICAgIHJlY29yZC5pZCxcbiAgICAgICAgICAgIHJlY29yZC5jb250cmFjdEFkZHJlc3MsXG4gICAgICAgICAgICByZWNvcmQubmV3QmFsYW5jZSxcbiAgICAgICAgKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihlbnRpdHkscmVjb3JkKTtcbiAgICAgICAgcmV0dXJuIGVudGl0eTtcbiAgICB9XG59XG4iLCAiLy8gQXV0by1nZW5lcmF0ZWQgLCBETyBOT1QgRURJVFxuaW1wb3J0IHtFbnRpdHksIEZ1bmN0aW9uUHJvcGVydHlOYW1lcywgRmllbGRzRXhwcmVzc2lvbiwgR2V0T3B0aW9ucyB9IGZyb20gXCJAc3VicWwvdHlwZXMtY29yZVwiO1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuXG5cblxuZXhwb3J0IHR5cGUgVXNkVmF1bHRXaXRoZHJhd1Byb3BzID0gT21pdDxVc2RWYXVsdFdpdGhkcmF3LCBOb25OdWxsYWJsZTxGdW5jdGlvblByb3BlcnR5TmFtZXM8VXNkVmF1bHRXaXRoZHJhdz4+IHwgJ19uYW1lJz47XG5cbi8qXG4gKiBDb21wYXQgdHlwZXMgYWxsb3dzIGZvciBzdXBwb3J0IG9mIGFsdGVybmF0aXZlIGBpZGAgdHlwZXMgd2l0aG91dCByZWZhY3RvcmluZyB0aGUgbm9kZVxuICovXG50eXBlIENvbXBhdFVzZFZhdWx0V2l0aGRyYXdQcm9wcyA9IE9taXQ8VXNkVmF1bHRXaXRoZHJhd1Byb3BzLCAnaWQnPiAmIHsgaWQ6IHN0cmluZzsgfTtcbnR5cGUgQ29tcGF0RW50aXR5ID0gT21pdDxFbnRpdHksICdpZCc+ICYgeyBpZDogc3RyaW5nOyB9O1xuXG5leHBvcnQgY2xhc3MgVXNkVmF1bHRXaXRoZHJhdyBpbXBsZW1lbnRzIENvbXBhdEVudGl0eSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgXG4gICAgICAgIGlkOiBzdHJpbmcsXG4gICAgICAgIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuICAgICAgICB0bzogc3RyaW5nLFxuICAgICAgICBhbW91bnQ6IGJpZ2ludCxcbiAgICApIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmNvbnRyYWN0QWRkcmVzcyA9IGNvbnRyYWN0QWRkcmVzcztcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgICAgICB0aGlzLmFtb3VudCA9IGFtb3VudDtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgcHVibGljIGlkOiBzdHJpbmc7XG4gICAgcHVibGljIGJsb2NrSGVpZ2h0PzogYmlnaW50O1xuICAgIHB1YmxpYyBjb250cmFjdEFkZHJlc3M6IHN0cmluZztcbiAgICBwdWJsaWMgdG86IHN0cmluZztcbiAgICBwdWJsaWMgYW1vdW50OiBiaWdpbnQ7XG4gICAgcHVibGljIHRpbWVzdGFtcD86IERhdGU7XG4gICAgXG5cbiAgICBnZXQgX25hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICdVc2RWYXVsdFdpdGhkcmF3JztcbiAgICB9XG5cbiAgICBhc3luYyBzYXZlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBpZCA9IHRoaXMuaWQ7XG4gICAgICAgIGFzc2VydChpZCAhPT0gbnVsbCwgXCJDYW5ub3Qgc2F2ZSBVc2RWYXVsdFdpdGhkcmF3IGVudGl0eSB3aXRob3V0IGFuIElEXCIpO1xuICAgICAgICBhd2FpdCBzdG9yZS5zZXQoJ1VzZFZhdWx0V2l0aGRyYXcnLCBpZC50b1N0cmluZygpLCB0aGlzIGFzIHVua25vd24gYXMgQ29tcGF0VXNkVmF1bHRXaXRoZHJhd1Byb3BzKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgcmVtb3ZlKGlkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXNzZXJ0KGlkICE9PSBudWxsLCBcIkNhbm5vdCByZW1vdmUgVXNkVmF1bHRXaXRoZHJhdyBlbnRpdHkgd2l0aG91dCBhbiBJRFwiKTtcbiAgICAgICAgYXdhaXQgc3RvcmUucmVtb3ZlKCdVc2RWYXVsdFdpdGhkcmF3JywgaWQudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIGdldChpZDogc3RyaW5nKTogUHJvbWlzZTxVc2RWYXVsdFdpdGhkcmF3IHwgdW5kZWZpbmVkPiB7XG4gICAgICAgIGFzc2VydCgoaWQgIT09IG51bGwgJiYgaWQgIT09IHVuZGVmaW5lZCksIFwiQ2Fubm90IGdldCBVc2RWYXVsdFdpdGhkcmF3IGVudGl0eSB3aXRob3V0IGFuIElEXCIpO1xuICAgICAgICBjb25zdCByZWNvcmQgPSBhd2FpdCBzdG9yZS5nZXQoJ1VzZFZhdWx0V2l0aGRyYXcnLCBpZC50b1N0cmluZygpKTtcbiAgICAgICAgaWYgKHJlY29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHJlY29yZCBhcyB1bmtub3duIGFzIFVzZFZhdWx0V2l0aGRyYXdQcm9wcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgZ2V0QnlUbyh0bzogc3RyaW5nLCBvcHRpb25zOiBHZXRPcHRpb25zPENvbXBhdFVzZFZhdWx0V2l0aGRyYXdQcm9wcz4pOiBQcm9taXNlPFVzZFZhdWx0V2l0aGRyYXdbXT4ge1xuICAgICAgICAvLyBJbnB1dHMgbXVzdCBiZSBjYXN0IGFzIHRoZSBzdG9yZSBpbnRlcmZhY2UgaGFzIG5vdCBiZWVuIHVwZGF0ZWQgdG8gc3VwcG9ydCBhbHRlcm5hdGl2ZSBJRCB0eXBlc1xuICAgICAgICBjb25zdCByZWNvcmRzID0gYXdhaXQgc3RvcmUuZ2V0QnlGaWVsZDxDb21wYXRVc2RWYXVsdFdpdGhkcmF3UHJvcHM+KCdVc2RWYXVsdFdpdGhkcmF3JywgJ3RvJywgdG8sIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gcmVjb3Jkcy5tYXAocmVjb3JkID0+IHRoaXMuY3JlYXRlKHJlY29yZCBhcyB1bmtub3duIGFzIFVzZFZhdWx0V2l0aGRyYXdQcm9wcykpO1xuICAgIH1cbiAgICBcblxuXG4gICAgLyoqXG4gICAgICogR2V0cyBlbnRpdGllcyBtYXRjaGluZyB0aGUgc3BlY2lmaWVkIGZpbHRlcnMgYW5kIG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBcdTI2QTBcdUZFMEYgVGhpcyBmdW5jdGlvbiB3aWxsIGZpcnN0IHNlYXJjaCBjYWNoZSBkYXRhIGZvbGxvd2VkIGJ5IERCIGRhdGEuIFBsZWFzZSBjb25zaWRlciB0aGlzIHdoZW4gdXNpbmcgb3JkZXIgYW5kIG9mZnNldCBvcHRpb25zLlx1MjZBMFx1RkUwRlxuICAgICAqICovXG4gICAgc3RhdGljIGFzeW5jIGdldEJ5RmllbGRzKGZpbHRlcjogRmllbGRzRXhwcmVzc2lvbjxVc2RWYXVsdFdpdGhkcmF3UHJvcHM+W10sIG9wdGlvbnM6IEdldE9wdGlvbnM8VXNkVmF1bHRXaXRoZHJhd1Byb3BzPik6IFByb21pc2U8VXNkVmF1bHRXaXRoZHJhd1tdPiB7XG4gICAgICAgIGNvbnN0IHJlY29yZHMgPSBhd2FpdCBzdG9yZS5nZXRCeUZpZWxkczxDb21wYXRVc2RWYXVsdFdpdGhkcmF3UHJvcHM+KCdVc2RWYXVsdFdpdGhkcmF3JywgZmlsdGVyICBhcyB1bmtub3duIGFzIEZpZWxkc0V4cHJlc3Npb248Q29tcGF0VXNkVmF1bHRXaXRoZHJhd1Byb3BzPltdLCBvcHRpb25zIGFzIHVua25vd24gYXMgR2V0T3B0aW9uczxDb21wYXRVc2RWYXVsdFdpdGhkcmF3UHJvcHM+KTtcbiAgICAgICAgcmV0dXJuIHJlY29yZHMubWFwKHJlY29yZCA9PiB0aGlzLmNyZWF0ZShyZWNvcmQgYXMgdW5rbm93biBhcyBVc2RWYXVsdFdpdGhkcmF3UHJvcHMpKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgY3JlYXRlKHJlY29yZDogVXNkVmF1bHRXaXRoZHJhd1Byb3BzKTogVXNkVmF1bHRXaXRoZHJhdyB7XG4gICAgICAgIGFzc2VydChyZWNvcmQuaWQgIT09IHVuZGVmaW5lZCAmJiByZWNvcmQuaWQgIT09IG51bGwsIFwiaWQgbXVzdCBiZSBwcm92aWRlZFwiKTtcbiAgICAgICAgY29uc3QgZW50aXR5ID0gbmV3IHRoaXMoXG4gICAgICAgICAgICByZWNvcmQuaWQsXG4gICAgICAgICAgICByZWNvcmQuY29udHJhY3RBZGRyZXNzLFxuICAgICAgICAgICAgcmVjb3JkLnRvLFxuICAgICAgICAgICAgcmVjb3JkLmFtb3VudCxcbiAgICAgICAgKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihlbnRpdHkscmVjb3JkKTtcbiAgICAgICAgcmV0dXJuIGVudGl0eTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgQXBwcm92YWwsIFRyYW5zZmVyIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQge1xuICBBcHByb3ZlVHJhbnNhY3Rpb24sXG4gIFRyYW5zZmVyTG9nLFxufSBmcm9tIFwiLi4vdHlwZXMvYWJpLWludGVyZmFjZXMvRXJjMjBcIjtcbmltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlTG9nKGxvZzogVHJhbnNmZXJMb2cpOiBQcm9taXNlPHZvaWQ+IHtcbiAgbG9nZ2VyLmluZm8oYE5ldyB0cmFuc2ZlciB0cmFuc2FjdGlvbiBsb2cgYXQgYmxvY2sgJHtsb2cuYmxvY2tOdW1iZXJ9YCk7XG4gIGFzc2VydChsb2cuYXJncywgXCJObyBsb2cuYXJnc1wiKTtcblxuICBjb25zdCB0cmFuc2FjdGlvbiA9IFRyYW5zZmVyLmNyZWF0ZSh7XG4gICAgaWQ6IGxvZy50cmFuc2FjdGlvbkhhc2gsXG4gICAgYmxvY2tIZWlnaHQ6IEJpZ0ludChsb2cuYmxvY2tOdW1iZXIpLFxuICAgIHRvOiBsb2cuYXJncy50byxcbiAgICBmcm9tOiBsb2cuYXJncy5mcm9tLFxuICAgIHZhbHVlOiBsb2cuYXJncy52YWx1ZS50b0JpZ0ludCgpLFxuICAgIGNvbnRyYWN0QWRkcmVzczogbG9nLmFkZHJlc3MsXG4gIH0pO1xuXG4gIGF3YWl0IHRyYW5zYWN0aW9uLnNhdmUoKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVRyYW5zYWN0aW9uKHR4OiBBcHByb3ZlVHJhbnNhY3Rpb24pOiBQcm9taXNlPHZvaWQ+IHtcbiAgbG9nZ2VyLmluZm8oYE5ldyBBcHByb3ZhbCB0cmFuc2FjdGlvbiBhdCBibG9jayAke3R4LmJsb2NrTnVtYmVyfWApO1xuICBhc3NlcnQodHguYXJncywgXCJObyB0eC5hcmdzXCIpO1xuXG4gIGNvbnN0IGFwcHJvdmFsID0gQXBwcm92YWwuY3JlYXRlKHtcbiAgICBpZDogdHguaGFzaCxcbiAgICBvd25lcjogdHguZnJvbSxcbiAgICBzcGVuZGVyOiBhd2FpdCB0eC5hcmdzWzBdLFxuICAgIHZhbHVlOiBCaWdJbnQoYXdhaXQgdHguYXJnc1sxXS50b1N0cmluZygpKSxcbiAgICBjb250cmFjdEFkZHJlc3M6IHR4LnRvIHx8IFwiXCIsXG4gIH0pO1xuXG4gIGF3YWl0IGFwcHJvdmFsLnNhdmUoKTtcbn1cbiIsICJpbXBvcnQgeyBTdGFrZXIsIFN0YWtlZFJlY29yZCwgVW5zdGFrZUFjY2VwdGVkLCBSZWZlcnJhbEJvdW5kIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBTdGFrZWRMb2csIFVuc3Rha2VBY2NlcHRlZExvZywgVW5zdGFrZUZpbmlzaGVkTG9nLCBSZWZlcnJhbEJvdW5kTG9nIH0gZnJvbSBcIi4uL3R5cGVzL2FiaS1pbnRlcmZhY2VzL1NzZXRoXCI7XG5pbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVN0YWtlZExvZyhzdGFrZWQ6IFN0YWtlZExvZyk6IFByb21pc2U8dm9pZD4ge1xuICBsb2dnZXIuaW5mbyhgTmV3IHN0YWtlZCB0cmFuc2FjdGlvbiBsb2cgYXQgYmxvY2sgJHtzdGFrZWQuYmxvY2tOdW1iZXJ9YCk7XG4gIGFzc2VydChzdGFrZWQuYXJncywgXCJObyBzdGFrZWQuYXJnc1wiKTtcbiAgY29uc3QgcmVjb3JkID0gU3Rha2VkUmVjb3JkLmNyZWF0ZSh7XG4gICAgaWQ6IHN0YWtlZC50cmFuc2FjdGlvbkhhc2gsXG4gICAgcG9vbDogc3Rha2VkLmFkZHJlc3MsXG4gICAgYmxvY2tIZWlnaHQ6IEJpZ0ludChzdGFrZWQuYmxvY2tOdW1iZXIpLFxuICAgIHN0YWtlcjogc3Rha2VkLmFyZ3Muc3Rha2VyLFxuICAgIHN0YWtlVG9rZW46IFwiMHgwMDBcIixcbiAgICBzdGFrZUFtb3VudDogc3Rha2VkLmFyZ3MuYW1vdW50LnRvQmlnSW50KCksXG4gICAgbWludFJlY2VpdmVyOiBzdGFrZWQuYXJncy5yZWNlaXZlcixcbiAgICBtaW50QW1vdW50OiBzdGFrZWQuYXJncy5taW50ZWQudG9CaWdJbnQoKSxcbiAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKE51bWJlcihzdGFrZWQudHJhbnNhY3Rpb24uYmxvY2tUaW1lc3RhbXApICogMTAwMCksXG4gIH0pO1xuXG4gIGF3YWl0IHJlY29yZC5zYXZlKCk7XG5cbiAgY29uc3Qgc3Rha2VyX2lkID0gYCR7c3Rha2VkLmFkZHJlc3N9LSR7c3Rha2VkLmFyZ3Muc3Rha2VyfWA7XG5cbiAgbGV0IHN0YWtlciA9IGF3YWl0IFN0YWtlci5nZXQoc3Rha2VyX2lkKTtcblxuICBpZiAoIXN0YWtlcikge1xuICAgIHN0YWtlciA9IGF3YWl0IFN0YWtlci5jcmVhdGUoe1xuICAgICAgaWQ6IHN0YWtlcl9pZCxcbiAgICAgIHBvb2w6IHN0YWtlZC5hZGRyZXNzLFxuICAgICAgc3Rha2VyOiBzdGFrZWQuYXJncy5zdGFrZXIsXG4gICAgICBzdGFrZUFtb3VudDogc3Rha2VkLmFyZ3MuYW1vdW50LnRvQmlnSW50KCksXG4gICAgICBtaW50QW1vdW50OiBzdGFrZWQuYXJncy5taW50ZWQudG9CaWdJbnQoKSxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBzdGFrZXIubWludEFtb3VudCA9IHN0YWtlZC5hcmdzLm1pbnRlZC50b0JpZ0ludCgpICsgc3Rha2VyLm1pbnRBbW91bnQhO1xuICAgIHN0YWtlci5zdGFrZUFtb3VudCA9IHN0YWtlZC5hcmdzLmFtb3VudC50b0JpZ0ludCgpICsgc3Rha2VyLnN0YWtlQW1vdW50ITtcbiAgfVxuXG4gIGF3YWl0IHN0YWtlci5zYXZlKCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVVbnN0YWtlQWNjZXB0ZWRMb2codW5zdGFrZTogVW5zdGFrZUFjY2VwdGVkTG9nKTogUHJvbWlzZTx2b2lkPiB7XG4gIGxvZ2dlci5pbmZvKGBOZXcgdW5zdGFrZSBhY2NlcHRlZCB0cmFuc2FjdGlvbiBsb2cgYXQgYmxvY2sgJHt1bnN0YWtlLmJsb2NrTnVtYmVyfWApO1xuICBhc3NlcnQodW5zdGFrZS5hcmdzLCBcIk5vIHVuc3Rha2UuYXJnc1wiKTtcblxuICBsb2dnZXIuaW5mbyhgdW5zdGFrZT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1gKTtcbiAgbG9nZ2VyLmluZm8oYHVuc3Rha2UuYWRkcmVzczogJHt1bnN0YWtlLmFkZHJlc3N9YCk7XG4gIGxvZ2dlci5pbmZvKGB1bnN0YWtlLmJsb2NrTnVtYmVyOiAke3Vuc3Rha2UuYmxvY2tOdW1iZXJ9YCk7XG4gIGxvZ2dlci5pbmZvKGB1bnN0YWtlLnRyYW5zYWN0aW9uSGFzaDogJHt1bnN0YWtlLnRyYW5zYWN0aW9uSGFzaH1gKTtcbiAgbG9nZ2VyLmluZm8oYHVuc3Rha2UudHJhbnNhY3Rpb24uYmxvY2tUaW1lc3RhbXA6ICR7dW5zdGFrZS50cmFuc2FjdGlvbi5ibG9ja1RpbWVzdGFtcH1gKTtcbiAgbG9nZ2VyLmluZm8oYHVuc3Rha2UuYXJncy5hY2NlcHRfaWQ6ICR7dW5zdGFrZS5hcmdzLmFjY2VwdF9pZH1gKTtcbiAgbG9nZ2VyLmluZm8oYHVuc3Rha2UuYXJncy5zdGFrZXI6ICR7dW5zdGFrZS5hcmdzLnN0YWtlcn1gKTtcbiAgbG9nZ2VyLmluZm8oYHVuc3Rha2UuYXJncy5yZWNlaXZlcjogJHt1bnN0YWtlLmFyZ3MucmVjZWl2ZXJ9YCk7XG4gIGxvZ2dlci5pbmZvKGB1bnN0YWtlLmFyZ3MudW5zdGFrZV9hbW91bnQ6ICR7dW5zdGFrZS5hcmdzLnVuc3Rha2VfYW1vdW50fWApO1xuICBsb2dnZXIuaW5mbyhgdW5zdGFrZS5hcmdzLnJlZGVlbV9lYXJuaW5nOiAke3Vuc3Rha2UuYXJncy5yZWRlZW1fZWFybmluZ31gKTtcbiAgbG9nZ2VyLmluZm8oYHVuc3Rha2UuYXJncy53aXRoZHJhd19ldGg6ICR7dW5zdGFrZS5hcmdzLndpdGhkcmF3X2V0aH1gKTtcbiAgbG9nZ2VyLmluZm8oYHVuc3Rha2UuYXJncy5yZXBheV91c2RjOiAke3Vuc3Rha2UuYXJncy5yZXBheV91c2RjfWApO1xuICBsb2dnZXIuaW5mbyhgdW5zdGFrZS5hcmdzOiAke0pTT04uc3RyaW5naWZ5KHVuc3Rha2UuYXJncyl9YCk7XG4gIGxvZ2dlci5pbmZvKGB1bnN0YWtlLmFyZ3MuYWNjZXB0X2lkOiAke3Vuc3Rha2UuYXJncy5hY2NlcHRfaWR9YCk7XG4gIGxvZ2dlci5pbmZvKGB1bnN0YWtlPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PWApO1xuXG4gIGNvbnN0IHJlY29yZCA9IFVuc3Rha2VBY2NlcHRlZC5jcmVhdGUoe1xuICAgIGlkOiB1bnN0YWtlLmFyZ3MuYWNjZXB0X2lkLnRvU3RyaW5nKCksXG4gICAgdHhIYXNoOiB1bnN0YWtlLnRyYW5zYWN0aW9uSGFzaCxcbiAgICBwb29sOiB1bnN0YWtlLmFkZHJlc3MsXG4gICAgYmxvY2tIZWlnaHQ6IEJpZ0ludCh1bnN0YWtlLmJsb2NrTnVtYmVyKSxcbiAgICBzdGFrZXI6IHVuc3Rha2UuYXJncy5zdGFrZXIsXG4gICAgdW5zdGFrZVRva2VuOiB1bnN0YWtlLmFkZHJlc3MsXG4gICAgdW5zdGFrZUFtb3VudDogdW5zdGFrZS5hcmdzLnVuc3Rha2VfYW1vdW50LnRvQmlnSW50KCksXG4gICAgcmVkZWVtRWFybmluZzogdW5zdGFrZS5hcmdzLnJlZGVlbV9lYXJuaW5nLnRvQmlnSW50KCksXG4gICAgd2l0aGRyYXdFdGg6IHVuc3Rha2UuYXJncy53aXRoZHJhd19ldGgudG9CaWdJbnQoKSxcbiAgICByZXBheVVzZGM6IHVuc3Rha2UuYXJncy5yZXBheV91c2RjLnRvQmlnSW50KCksXG4gICAgc3RhdHVzOiBcInBlbmRpbmdcIiwgLy8gSW5pdGlhbCBzdGF0dXMgaXMgcGVuZGluZ1xuICAgIHRpbWVzdGFtcDogbmV3IERhdGUoTnVtYmVyKHVuc3Rha2UudHJhbnNhY3Rpb24uYmxvY2tUaW1lc3RhbXApICogMTAwMCksXG4gIH0pO1xuXG4gIGF3YWl0IHJlY29yZC5zYXZlKCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVVbnN0YWtlRmluaXNoZWRMb2coZmluaXNoZWQ6IFVuc3Rha2VGaW5pc2hlZExvZyk6IFByb21pc2U8dm9pZD4ge1xuICBsb2dnZXIuaW5mbyhgTmV3IHVuc3Rha2UgZmluaXNoZWQgdHJhbnNhY3Rpb24gbG9nIGF0IGJsb2NrICR7ZmluaXNoZWQuYmxvY2tOdW1iZXJ9YCk7XG4gIGFzc2VydChmaW5pc2hlZC5hcmdzLCBcIk5vIGZpbmlzaGVkLmFyZ3NcIik7XG5cbiAgY29uc3QgcmVjb3JkID0gYXdhaXQgVW5zdGFrZUFjY2VwdGVkLmdldChmaW5pc2hlZC5hcmdzLmFjY2VwdF9pZC50b1N0cmluZygpKTtcblxuICBpZiAocmVjb3JkICYmIHJlY29yZC5zdGF0dXMgPT09IFwicGVuZGluZ1wiKSB7XG4gICAgcmVjb3JkLnN0YXR1cyA9IFwic3VjY2Vzc1wiO1xuICAgIGF3YWl0IHJlY29yZC5zYXZlKCk7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVJlZmVycmFsQm91bmRMb2cocmVmZXJyYWxCb3VuZDogUmVmZXJyYWxCb3VuZExvZyk6IFByb21pc2U8dm9pZD4ge1xuICBsb2dnZXIuaW5mbyhgTmV3IHJlZmVycmFsIGJvdW5kIHRyYW5zYWN0aW9uIGxvZyBhdCBibG9jayAke3JlZmVycmFsQm91bmQuYmxvY2tOdW1iZXJ9YCk7XG4gIGFzc2VydChyZWZlcnJhbEJvdW5kLmFyZ3MsIFwiTm8gcmVmZXJyYWxCb3VuZC5hcmdzXCIpO1xuXG4gIGxvZ2dlci5pbmZvKGByZWZlcnJhbEJvdW5kPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PWApO1xuICBsb2dnZXIuaW5mbyhgcmVmZXJyYWxCb3VuZC5hZGRyZXNzOiAke3JlZmVycmFsQm91bmQuYWRkcmVzc31gKTtcbiAgbG9nZ2VyLmluZm8oYHJlZmVycmFsQm91bmQuYmxvY2tOdW1iZXI6ICR7cmVmZXJyYWxCb3VuZC5ibG9ja051bWJlcn1gKTtcbiAgbG9nZ2VyLmluZm8oYHJlZmVycmFsQm91bmQudHJhbnNhY3Rpb25IYXNoOiAke3JlZmVycmFsQm91bmQudHJhbnNhY3Rpb25IYXNofWApO1xuICBsb2dnZXIuaW5mbyhgcmVmZXJyYWxCb3VuZC50cmFuc2FjdGlvbi5ibG9ja1RpbWVzdGFtcDogJHtyZWZlcnJhbEJvdW5kLnRyYW5zYWN0aW9uLmJsb2NrVGltZXN0YW1wfWApO1xuICBsb2dnZXIuaW5mbyhgcmVmZXJyYWxCb3VuZC5hcmdzLnVzZXI6ICR7cmVmZXJyYWxCb3VuZC5hcmdzLnVzZXJ9YCk7XG4gIGxvZ2dlci5pbmZvKGByZWZlcnJhbEJvdW5kLmFyZ3MucmVmZXJyZXI6ICR7cmVmZXJyYWxCb3VuZC5hcmdzLnJlZmVycmVyfWApO1xuICBsb2dnZXIuaW5mbyhgcmVmZXJyYWxCb3VuZD09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1gKTtcblxuICBjb25zdCByZWNvcmQgPSBSZWZlcnJhbEJvdW5kLmNyZWF0ZSh7XG4gICAgaWQ6IHJlZmVycmFsQm91bmQudHJhbnNhY3Rpb25IYXNoLFxuICAgIGJsb2NrSGVpZ2h0OiBCaWdJbnQocmVmZXJyYWxCb3VuZC5ibG9ja051bWJlciksXG4gICAgdXNlcjogcmVmZXJyYWxCb3VuZC5hcmdzLnVzZXIsXG4gICAgcmVmZXJyZXI6IHJlZmVycmFsQm91bmQuYXJncy5yZWZlcnJlcixcbiAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKE51bWJlcihyZWZlcnJhbEJvdW5kLnRyYW5zYWN0aW9uLmJsb2NrVGltZXN0YW1wKSAqIDEwMDApLFxuICB9KTtcblxuICBhd2FpdCByZWNvcmQuc2F2ZSgpO1xufVxuIiwgImltcG9ydCB7IFJlbW90ZUJhbGFuY2VVcGRhdGVkLCBSaXNrQmFsYW5jZVVwZGF0ZWQsIFVzZFZhdWx0V2l0aGRyYXcgfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IFJlbW90ZUJhbGFuY2VVcGRhdGVkTG9nLCBSaXNrQmFsYW5jZVVwZGF0ZWRMb2csIFdpdGhkcmF3TG9nIH0gZnJvbSBcIi4uL3R5cGVzL2FiaS1pbnRlcmZhY2VzL1VzZHZhdWx0XCI7XG5pbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVJlbW90ZUJhbGFuY2VVcGRhdGVkTG9nKHJlbW90ZUJhbGFuY2VVcGRhdGVkOiBSZW1vdGVCYWxhbmNlVXBkYXRlZExvZyk6IFByb21pc2U8dm9pZD4ge1xuICBsb2dnZXIuaW5mbyhgTmV3IHJlbW90ZSBiYWxhbmNlIHVwZGF0ZWQgdHJhbnNhY3Rpb24gbG9nIGF0IGJsb2NrICR7cmVtb3RlQmFsYW5jZVVwZGF0ZWQuYmxvY2tOdW1iZXJ9YCk7XG4gIGFzc2VydChyZW1vdGVCYWxhbmNlVXBkYXRlZC5hcmdzLCBcIk5vIHJlbW90ZUJhbGFuY2VVcGRhdGVkLmFyZ3NcIik7XG5cbiAgbG9nZ2VyLmluZm8oYHJlbW90ZUJhbGFuY2VVcGRhdGVkPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PWApO1xuICBsb2dnZXIuaW5mbyhgcmVtb3RlQmFsYW5jZVVwZGF0ZWQuYWRkcmVzczogJHtyZW1vdGVCYWxhbmNlVXBkYXRlZC5hZGRyZXNzfWApO1xuICBsb2dnZXIuaW5mbyhgcmVtb3RlQmFsYW5jZVVwZGF0ZWQuYmxvY2tOdW1iZXI6ICR7cmVtb3RlQmFsYW5jZVVwZGF0ZWQuYmxvY2tOdW1iZXJ9YCk7XG4gIGxvZ2dlci5pbmZvKGByZW1vdGVCYWxhbmNlVXBkYXRlZC50cmFuc2FjdGlvbkhhc2g6ICR7cmVtb3RlQmFsYW5jZVVwZGF0ZWQudHJhbnNhY3Rpb25IYXNofWApO1xuICBsb2dnZXIuaW5mbyhgcmVtb3RlQmFsYW5jZVVwZGF0ZWQudHJhbnNhY3Rpb24uYmxvY2tUaW1lc3RhbXA6ICR7cmVtb3RlQmFsYW5jZVVwZGF0ZWQudHJhbnNhY3Rpb24uYmxvY2tUaW1lc3RhbXB9YCk7XG4gIGxvZ2dlci5pbmZvKGByZW1vdGVCYWxhbmNlVXBkYXRlZC5hcmdzLm9wOiAke3JlbW90ZUJhbGFuY2VVcGRhdGVkLmFyZ3Mub3B9YCk7XG4gIGxvZ2dlci5pbmZvKGByZW1vdGVCYWxhbmNlVXBkYXRlZC5hcmdzLmFtb3VudDogJHtyZW1vdGVCYWxhbmNlVXBkYXRlZC5hcmdzLmFtb3VudH1gKTtcbiAgbG9nZ2VyLmluZm8oYHJlbW90ZUJhbGFuY2VVcGRhdGVkPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PWApO1xuXG4gIGNvbnN0IHJlY29yZCA9IFJlbW90ZUJhbGFuY2VVcGRhdGVkLmNyZWF0ZSh7XG4gICAgaWQ6IHJlbW90ZUJhbGFuY2VVcGRhdGVkLnRyYW5zYWN0aW9uSGFzaCxcbiAgICBibG9ja0hlaWdodDogQmlnSW50KHJlbW90ZUJhbGFuY2VVcGRhdGVkLmJsb2NrTnVtYmVyKSxcbiAgICBjb250cmFjdEFkZHJlc3M6IHJlbW90ZUJhbGFuY2VVcGRhdGVkLmFkZHJlc3MsXG4gICAgb3BUeXBlOiByZW1vdGVCYWxhbmNlVXBkYXRlZC5hcmdzLm9wLFxuICAgIGFtb3VudDogcmVtb3RlQmFsYW5jZVVwZGF0ZWQuYXJncy5hbW91bnQudG9CaWdJbnQoKSxcbiAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKE51bWJlcihyZW1vdGVCYWxhbmNlVXBkYXRlZC50cmFuc2FjdGlvbi5ibG9ja1RpbWVzdGFtcCkgKiAxMDAwKSxcbiAgfSk7XG5cbiAgYXdhaXQgcmVjb3JkLnNhdmUoKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVJpc2tCYWxhbmNlVXBkYXRlZExvZyhyaXNrQmFsYW5jZVVwZGF0ZWQ6IFJpc2tCYWxhbmNlVXBkYXRlZExvZyk6IFByb21pc2U8dm9pZD4ge1xuICBsb2dnZXIuaW5mbyhgTmV3IHJpc2sgYmFsYW5jZSB1cGRhdGVkIHRyYW5zYWN0aW9uIGxvZyBhdCBibG9jayAke3Jpc2tCYWxhbmNlVXBkYXRlZC5ibG9ja051bWJlcn1gKTtcbiAgYXNzZXJ0KHJpc2tCYWxhbmNlVXBkYXRlZC5hcmdzLCBcIk5vIHJpc2tCYWxhbmNlVXBkYXRlZC5hcmdzXCIpO1xuXG4gIGxvZ2dlci5pbmZvKGByaXNrQmFsYW5jZVVwZGF0ZWQ9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09YCk7XG4gIGxvZ2dlci5pbmZvKGByaXNrQmFsYW5jZVVwZGF0ZWQuYWRkcmVzczogJHtyaXNrQmFsYW5jZVVwZGF0ZWQuYWRkcmVzc31gKTtcbiAgbG9nZ2VyLmluZm8oYHJpc2tCYWxhbmNlVXBkYXRlZC5ibG9ja051bWJlcjogJHtyaXNrQmFsYW5jZVVwZGF0ZWQuYmxvY2tOdW1iZXJ9YCk7XG4gIGxvZ2dlci5pbmZvKGByaXNrQmFsYW5jZVVwZGF0ZWQudHJhbnNhY3Rpb25IYXNoOiAke3Jpc2tCYWxhbmNlVXBkYXRlZC50cmFuc2FjdGlvbkhhc2h9YCk7XG4gIGxvZ2dlci5pbmZvKGByaXNrQmFsYW5jZVVwZGF0ZWQudHJhbnNhY3Rpb24uYmxvY2tUaW1lc3RhbXA6ICR7cmlza0JhbGFuY2VVcGRhdGVkLnRyYW5zYWN0aW9uLmJsb2NrVGltZXN0YW1wfWApO1xuICBsb2dnZXIuaW5mbyhgcmlza0JhbGFuY2VVcGRhdGVkLmFyZ3MubmV3QmFsYW5jZTogJHtyaXNrQmFsYW5jZVVwZGF0ZWQuYXJncy5uZXdCYWxhbmNlfWApO1xuICBsb2dnZXIuaW5mbyhgcmlza0JhbGFuY2VVcGRhdGVkPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PWApO1xuXG4gIGNvbnN0IHJlY29yZCA9IFJpc2tCYWxhbmNlVXBkYXRlZC5jcmVhdGUoe1xuICAgIGlkOiByaXNrQmFsYW5jZVVwZGF0ZWQudHJhbnNhY3Rpb25IYXNoLFxuICAgIGJsb2NrSGVpZ2h0OiBCaWdJbnQocmlza0JhbGFuY2VVcGRhdGVkLmJsb2NrTnVtYmVyKSxcbiAgICBjb250cmFjdEFkZHJlc3M6IHJpc2tCYWxhbmNlVXBkYXRlZC5hZGRyZXNzLFxuICAgIG5ld0JhbGFuY2U6IHJpc2tCYWxhbmNlVXBkYXRlZC5hcmdzLm5ld0JhbGFuY2UudG9CaWdJbnQoKSxcbiAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKE51bWJlcihyaXNrQmFsYW5jZVVwZGF0ZWQudHJhbnNhY3Rpb24uYmxvY2tUaW1lc3RhbXApICogMTAwMCksXG4gIH0pO1xuXG4gIGF3YWl0IHJlY29yZC5zYXZlKCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVVc2RWYXVsdFdpdGhkcmF3TG9nKHdpdGhkcmF3OiBXaXRoZHJhd0xvZyk6IFByb21pc2U8dm9pZD4ge1xuICBsb2dnZXIuaW5mbyhgTmV3IFVTRCB2YXVsdCB3aXRoZHJhdyB0cmFuc2FjdGlvbiBsb2cgYXQgYmxvY2sgJHt3aXRoZHJhdy5ibG9ja051bWJlcn1gKTtcbiAgYXNzZXJ0KHdpdGhkcmF3LmFyZ3MsIFwiTm8gd2l0aGRyYXcuYXJnc1wiKTtcblxuICBsb2dnZXIuaW5mbyhgd2l0aGRyYXc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09YCk7XG4gIGxvZ2dlci5pbmZvKGB3aXRoZHJhdy5hZGRyZXNzOiAke3dpdGhkcmF3LmFkZHJlc3N9YCk7XG4gIGxvZ2dlci5pbmZvKGB3aXRoZHJhdy5ibG9ja051bWJlcjogJHt3aXRoZHJhdy5ibG9ja051bWJlcn1gKTtcbiAgbG9nZ2VyLmluZm8oYHdpdGhkcmF3LnRyYW5zYWN0aW9uSGFzaDogJHt3aXRoZHJhdy50cmFuc2FjdGlvbkhhc2h9YCk7XG4gIGxvZ2dlci5pbmZvKGB3aXRoZHJhdy50cmFuc2FjdGlvbi5ibG9ja1RpbWVzdGFtcDogJHt3aXRoZHJhdy50cmFuc2FjdGlvbi5ibG9ja1RpbWVzdGFtcH1gKTtcbiAgbG9nZ2VyLmluZm8oYHdpdGhkcmF3LmFyZ3MudG86ICR7d2l0aGRyYXcuYXJncy50b31gKTtcbiAgbG9nZ2VyLmluZm8oYHdpdGhkcmF3LmFyZ3MuYW1vdW50OiAke3dpdGhkcmF3LmFyZ3MuYW1vdW50fWApO1xuICBsb2dnZXIuaW5mbyhgd2l0aGRyYXc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09YCk7XG5cbiAgY29uc3QgcmVjb3JkID0gVXNkVmF1bHRXaXRoZHJhdy5jcmVhdGUoe1xuICAgIGlkOiB3aXRoZHJhdy50cmFuc2FjdGlvbkhhc2gsXG4gICAgYmxvY2tIZWlnaHQ6IEJpZ0ludCh3aXRoZHJhdy5ibG9ja051bWJlciksXG4gICAgY29udHJhY3RBZGRyZXNzOiB3aXRoZHJhdy5hZGRyZXNzLFxuICAgIHRvOiB3aXRoZHJhdy5hcmdzLnRvLFxuICAgIGFtb3VudDogd2l0aGRyYXcuYXJncy5hbW91bnQudG9CaWdJbnQoKSxcbiAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKE51bWJlcih3aXRoZHJhdy50cmFuc2FjdGlvbi5ibG9ja1RpbWVzdGFtcCkgKiAxMDAwKSxcbiAgfSk7XG5cbiAgYXdhaXQgcmVjb3JkLnNhdmUoKTtcbn1cbiJdLAogICJtYXBwaW5ncyI6ICIwakJBQUEsSUFBQUEsRUFBQSxHQUFBQyxFQUFBRCxFQUFBLGVBQUFFLEVBQUEsMkJBQUFDLEVBQUEsa0NBQUFDLEVBQUEsZ0NBQUFDLEVBQUEsb0JBQUFDLEVBQUEsc0JBQUFDLEVBQUEsNkJBQUFDLEVBQUEsNkJBQUFDLEVBQUEsOEJBQUFDLElBQUEsZUFBQUMsRUFBQVgsR0NFQSxJQUFBWSxFQUFtQixxQkFZTkMsRUFBTixLQUF1QyxDQUUxQyxZQUVJQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNGLENBQ0UsS0FBSyxHQUFLSixFQUNWLEtBQUssR0FBS0MsRUFDVixLQUFLLEtBQU9DLEVBQ1osS0FBSyxNQUFRQyxFQUNiLEtBQUssZ0JBQWtCQyxDQUUzQixDQVVBLElBQUksT0FBZ0IsQ0FDaEIsTUFBTyxVQUNYLENBRUEsTUFBTSxNQUFzQixDQUN4QixJQUFNSixFQUFLLEtBQUssTUFDaEIsRUFBQUssU0FBT0wsSUFBTyxLQUFNLDJDQUEyQyxFQUMvRCxNQUFNLE1BQU0sSUFBSSxXQUFZQSxFQUFHLFNBQVMsRUFBRyxJQUFzQyxDQUNyRixDQUVBLGFBQWEsT0FBT0EsRUFBMkIsSUFDM0MsRUFBQUssU0FBT0wsSUFBTyxLQUFNLDZDQUE2QyxFQUNqRSxNQUFNLE1BQU0sT0FBTyxXQUFZQSxFQUFHLFNBQVMsQ0FBQyxDQUNoRCxDQUVBLGFBQWEsSUFBSUEsRUFBMkMsSUFDeEQsRUFBQUssU0FBUUwsR0FBTyxLQUEyQiwwQ0FBMEMsRUFDcEYsSUFBTU0sRUFBUyxNQUFNLE1BQU0sSUFBSSxXQUFZTixFQUFHLFNBQVMsQ0FBQyxFQUN4RCxHQUFJTSxFQUNBLE9BQU8sS0FBSyxPQUFPQSxDQUFrQyxDQUk3RCxDQVFBLGFBQWEsWUFBWUMsRUFBMkNDLEVBQXlELENBRXpILE9BRGdCLE1BQU0sTUFB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QixXQUFXLEVBQ2xELGdCQUFpQkEsRUFBbUIsUUFDcEMsV0FBWUEsRUFBbUIsS0FBSyxXQUFXLFNBQVMsRUFDeEQsVUFBVyxJQUFJLEtBQUssT0FBT0EsRUFBbUIsWUFBWSxjQUFjLEVBQUksR0FBSSxDQUNsRixDQUFDLEVBRVksS0FBSyxDQUNwQixDQUVBLGVBQXNCRSxFQUEwQkMsRUFBc0MsQ0FDcEYsT0FBTyxLQUFLLG1EQUFtREEsRUFBUyxXQUFXLEVBQUUsS0FDckYsRUFBQU4sU0FBT00sRUFBUyxLQUFNLGtCQUFrQixFQUV4QyxPQUFPLEtBQUssa0RBQWtELEVBQzlELE9BQU8sS0FBSyxxQkFBcUJBLEVBQVMsT0FBTyxFQUFFLEVBQ25ELE9BQU8sS0FBSyx5QkFBeUJBLEVBQVMsV0FBVyxFQUFFLEVBQzNELE9BQU8sS0FBSyw2QkFBNkJBLEVBQVMsZUFBZSxFQUFFLEVBQ25FLE9BQU8sS0FBSyx3Q0FBd0NBLEVBQVMsWUFBWSxjQUFjLEVBQUUsRUFDekYsT0FBTyxLQUFLLHFCQUFxQkEsRUFBUyxLQUFLLEVBQUUsRUFBRSxFQUNuRCxPQUFPLEtBQUsseUJBQXlCQSxFQUFTLEtBQUssTUFBTSxFQUFFLEVBQzNELE9BQU8sS0FBSyxrREFBa0QsRUFXOUQsTUFUZUMsRUFBaUIsT0FBTyxDQUNyQyxHQUFJRCxFQUFTLGdCQUNiLFlBQWEsT0FBT0EsRUFBUyxXQUFXLEVBQ3hDLGdCQUFpQkEsRUFBUyxRQUMxQixHQUFJQSxFQUFTLEtBQUssR0FDbEIsT0FBUUEsRUFBUyxLQUFLLE9BQU8sU0FBUyxFQUN0QyxVQUFXLElBQUksS0FBSyxPQUFPQSxFQUFTLFlBQVksY0FBYyxFQUFJLEdBQUksQ0FDeEUsQ0FBQyxFQUVZLEtBQUssQ0FDcEIiLAogICJuYW1lcyI6IFsiaW5kZXhfZXhwb3J0cyIsICJfX2V4cG9ydCIsICJoYW5kbGVMb2ciLCAiaGFuZGxlUmVmZXJyYWxCb3VuZExvZyIsICJoYW5kbGVSZW1vdGVCYWxhbmNlVXBkYXRlZExvZyIsICJoYW5kbGVSaXNrQmFsYW5jZVVwZGF0ZWRMb2ciLCAiaGFuZGxlU3Rha2VkTG9nIiwgImhhbmRsZVRyYW5zYWN0aW9uIiwgImhhbmRsZVVuc3Rha2VBY2NlcHRlZExvZyIsICJoYW5kbGVVbnN0YWtlRmluaXNoZWRMb2ciLCAiaGFuZGxlVXNkVmF1bHRXaXRoZHJhd0xvZyIsICJfX3RvQ29tbW9uSlMiLCAiaW1wb3J0X2Fzc2VydCIsICJUcmFuc2ZlciIsICJpZCIsICJ0byIsICJmcm9tIiwgInZhbHVlIiwgImNvbnRyYWN0QWRkcmVzcyIsICJhc3NlcnQiLCAicmVjb3JkIiwgImZpbHRlciIsICJvcHRpb25zIiwgImVudGl0eSIsICJpbXBvcnRfYXNzZXJ0IiwgIkFwcHJvdmFsIiwgImlkIiwgIm93bmVyIiwgInNwZW5kZXIiLCAidmFsdWUiLCAiY29udHJhY3RBZGRyZXNzIiwgImFzc2VydCIsICJyZWNvcmQiLCAiZmlsdGVyIiwgIm9wdGlvbnMiLCAiZW50aXR5IiwgImltcG9ydF9hc3NlcnQiLCAiU3Rha2VkUmVjb3JkIiwgImlkIiwgImFzc2VydCIsICJyZWNvcmQiLCAiZmlsdGVyIiwgIm9wdGlvbnMiLCAiZW50aXR5IiwgImltcG9ydF9hc3NlcnQiLCAiU3Rha2VyIiwgImlkIiwgImFzc2VydCIsICJyZWNvcmQiLCAiZmlsdGVyIiwgIm9wdGlvbnMiLCAiZW50aXR5IiwgImltcG9ydF9hc3NlcnQiLCAiVW5zdGFrZUFjY2VwdGVkIiwgImlkIiwgImFzc2VydCIsICJyZWNvcmQiLCAiZmlsdGVyIiwgIm9wdGlvbnMiLCAiZW50aXR5IiwgImltcG9ydF9hc3NlcnQiLCAiUmVmZXJyYWxCb3VuZCIsICJpZCIsICJ1c2VyIiwgInJlZmVycmVyIiwgImFzc2VydCIsICJyZWNvcmQiLCAib3B0aW9ucyIsICJmaWx0ZXIiLCAiZW50aXR5IiwgImltcG9ydF9hc3NlcnQiLCAiUmVtb3RlQmFsYW5jZVVwZGF0ZWQiLCAiaWQiLCAiY29udHJhY3RBZGRyZXNzIiwgIm9wVHlwZSIsICJhbW91bnQiLCAiYXNzZXJ0IiwgInJlY29yZCIsICJmaWx0ZXIiLCAib3B0aW9ucyIsICJlbnRpdHkiLCAiaW1wb3J0X2Fzc2VydCIsICJSaXNrQmFsYW5jZVVwZGF0ZWQiLCAiaWQiLCAiY29udHJhY3RBZGRyZXNzIiwgIm5ld0JhbGFuY2UiLCAiYXNzZXJ0IiwgInJlY29yZCIsICJmaWx0ZXIiLCAib3B0aW9ucyIsICJlbnRpdHkiLCAiaW1wb3J0X2Fzc2VydCIsICJVc2RWYXVsdFdpdGhkcmF3IiwgImlkIiwgImNvbnRyYWN0QWRkcmVzcyIsICJ0byIsICJhbW91bnQiLCAiYXNzZXJ0IiwgInJlY29yZCIsICJvcHRpb25zIiwgImZpbHRlciIsICJlbnRpdHkiLCAiaW1wb3J0X2Fzc2VydCIsICJoYW5kbGVMb2ciLCAibG9nIiwgImFzc2VydCIsICJUcmFuc2ZlciIsICJoYW5kbGVUcmFuc2FjdGlvbiIsICJ0eCIsICJBcHByb3ZhbCIsICJpbXBvcnRfYXNzZXJ0IiwgImhhbmRsZVN0YWtlZExvZyIsICJzdGFrZWQiLCAiYXNzZXJ0IiwgIlN0YWtlZFJlY29yZCIsICJzdGFrZXJfaWQiLCAic3Rha2VyIiwgIlN0YWtlciIsICJoYW5kbGVVbnN0YWtlQWNjZXB0ZWRMb2ciLCAidW5zdGFrZSIsICJVbnN0YWtlQWNjZXB0ZWQiLCAiaGFuZGxlVW5zdGFrZUZpbmlzaGVkTG9nIiwgImZpbmlzaGVkIiwgInJlY29yZCIsICJoYW5kbGVSZWZlcnJhbEJvdW5kTG9nIiwgInJlZmVycmFsQm91bmQiLCAiUmVmZXJyYWxCb3VuZCIsICJpbXBvcnRfYXNzZXJ0IiwgImhhbmRsZVJlbW90ZUJhbGFuY2VVcGRhdGVkTG9nIiwgInJlbW90ZUJhbGFuY2VVcGRhdGVkIiwgImFzc2VydCIsICJSZW1vdGVCYWxhbmNlVXBkYXRlZCIsICJoYW5kbGVSaXNrQmFsYW5jZVVwZGF0ZWRMb2ciLCAicmlza0JhbGFuY2VVcGRhdGVkIiwgIlJpc2tCYWxhbmNlVXBkYXRlZCIsICJoYW5kbGVVc2RWYXVsdFdpdGhkcmF3TG9nIiwgIndpdGhkcmF3IiwgIlVzZFZhdWx0V2l0aGRyYXciXQp9Cg==
