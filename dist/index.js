"use strict";var k=Object.create;var P=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var D=Object.getPrototypeOf,I=Object.prototype.hasOwnProperty;var q=(t,e)=>{for(var s in e)P(t,s,{get:e[s],enumerable:!0})},f=(t,e,s,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of E(e))!I.call(t,r)&&r!==s&&P(t,r,{get:()=>e[r],enumerable:!(o=x(e,r))||o.enumerable});return t};var i=(t,e,s)=>(s=t!=null?k(D(t)):{},f(e||!t||!t.__esModule?P(s,"default",{value:t,enumerable:!0}):s,t)),N=t=>f(P({},"__esModule",{value:!0}),t);var S={};q(S,{handleDeposit:()=>O,handleRedeemApproved:()=>$,handleRedeemCancelled:()=>F,handleRedeemExecuted:()=>A,handleRedeemRequested:()=>W,handleWithdraw:()=>B});module.exports=N(S);var C=i(require("assert"));var n=i(require("assert")),a=class{constructor(e,s,o,r){this.id=e,this.owner=s,this.assets=o,this.shares=r}get _name(){return"Deposit"}async save(){let e=this.id;(0,n.default)(e!==null,"Cannot save Deposit entity without an ID"),await store.set("Deposit",e.toString(),this)}static async remove(e){(0,n.default)(e!==null,"Cannot remove Deposit entity without an ID"),await store.remove("Deposit",e.toString())}static async get(e){(0,n.default)(e!=null,"Cannot get Deposit entity without an ID");let s=await store.get("Deposit",e.toString());if(s)return this.create(s)}static async getByOwner(e,s){return(await store.getByField("Deposit","owner",e,s)).map(r=>this.create(r))}static async getByFields(e,s){return(await store.getByFields("Deposit",e,s)).map(r=>this.create(r))}static create(e){(0,n.default)(e.id!==void 0&&e.id!==null,"id must be provided");let s=new this(e.id,e.owner,e.assets,e.shares);return Object.assign(s,e),s}};var d=i(require("assert")),p=class{constructor(e,s,o,r,y,v){this.id=e,this.sender=s,this.receiver=o,this.owner=r,this.assets=y,this.shares=v}get _name(){return"Withdraw"}async save(){let e=this.id;(0,d.default)(e!==null,"Cannot save Withdraw entity without an ID"),await store.set("Withdraw",e.toString(),this)}static async remove(e){(0,d.default)(e!==null,"Cannot remove Withdraw entity without an ID"),await store.remove("Withdraw",e.toString())}static async get(e){(0,d.default)(e!=null,"Cannot get Withdraw entity without an ID");let s=await store.get("Withdraw",e.toString());if(s)return this.create(s)}static async getBySender(e,s){return(await store.getByField("Withdraw","sender",e,s)).map(r=>this.create(r))}static async getByReceiver(e,s){return(await store.getByField("Withdraw","receiver",e,s)).map(r=>this.create(r))}static async getByOwner(e,s){return(await store.getByField("Withdraw","owner",e,s)).map(r=>this.create(r))}static async getByFields(e,s){return(await store.getByFields("Withdraw",e,s)).map(r=>this.create(r))}static create(e){(0,d.default)(e.id!==void 0&&e.id!==null,"id must be provided");let s=new this(e.id,e.sender,e.receiver,e.owner,e.assets,e.shares);return Object.assign(s,e),s}};var m=i(require("assert")),g=class{constructor(e,s,o,r){this.id=e,this.requestId=s,this.owner=o,this.shares=r}get _name(){return"RedeemRequested"}async save(){let e=this.id;(0,m.default)(e!==null,"Cannot save RedeemRequested entity without an ID"),await store.set("RedeemRequested",e.toString(),this)}static async remove(e){(0,m.default)(e!==null,"Cannot remove RedeemRequested entity without an ID"),await store.remove("RedeemRequested",e.toString())}static async get(e){(0,m.default)(e!=null,"Cannot get RedeemRequested entity without an ID");let s=await store.get("RedeemRequested",e.toString());if(s)return this.create(s)}static async getByRequestId(e,s){return(await store.getByField("RedeemRequested","requestId",e,s)).map(r=>this.create(r))}static async getByOwner(e,s){return(await store.getByField("RedeemRequested","owner",e,s)).map(r=>this.create(r))}static async getByFields(e,s){return(await store.getByFields("RedeemRequested",e,s)).map(r=>this.create(r))}static create(e){(0,m.default)(e.id!==void 0&&e.id!==null,"id must be provided");let s=new this(e.id,e.requestId,e.owner,e.shares);return Object.assign(s,e),s}};var c=i(require("assert")),l=class{constructor(e,s,o,r){this.id=e,this.requestId=s,this.owner=o,this.shares=r}get _name(){return"RedeemCancelled"}async save(){let e=this.id;(0,c.default)(e!==null,"Cannot save RedeemCancelled entity without an ID"),await store.set("RedeemCancelled",e.toString(),this)}static async remove(e){(0,c.default)(e!==null,"Cannot remove RedeemCancelled entity without an ID"),await store.remove("RedeemCancelled",e.toString())}static async get(e){(0,c.default)(e!=null,"Cannot get RedeemCancelled entity without an ID");let s=await store.get("RedeemCancelled",e.toString());if(s)return this.create(s)}static async getByRequestId(e,s){return(await store.getByField("RedeemCancelled","requestId",e,s)).map(r=>this.create(r))}static async getByOwner(e,s){return(await store.getByField("RedeemCancelled","owner",e,s)).map(r=>this.create(r))}static async getByFields(e,s){return(await store.getByFields("RedeemCancelled",e,s)).map(r=>this.create(r))}static create(e){(0,c.default)(e.id!==void 0&&e.id!==null,"id must be provided");let s=new this(e.id,e.requestId,e.owner,e.shares);return Object.assign(s,e),s}};var u=i(require("assert")),h=class{constructor(e,s,o,r){this.id=e,this.requestId=s,this.owner=o,this.shares=r}get _name(){return"RedeemApproved"}async save(){let e=this.id;(0,u.default)(e!==null,"Cannot save RedeemApproved entity without an ID"),await store.set("RedeemApproved",e.toString(),this)}static async remove(e){(0,u.default)(e!==null,"Cannot remove RedeemApproved entity without an ID"),await store.remove("RedeemApproved",e.toString())}static async get(e){(0,u.default)(e!=null,"Cannot get RedeemApproved entity without an ID");let s=await store.get("RedeemApproved",e.toString());if(s)return this.create(s)}static async getByRequestId(e,s){return(await store.getByField("RedeemApproved","requestId",e,s)).map(r=>this.create(r))}static async getByOwner(e,s){return(await store.getByField("RedeemApproved","owner",e,s)).map(r=>this.create(r))}static async getByFields(e,s){return(await store.getByFields("RedeemApproved",e,s)).map(r=>this.create(r))}static create(e){(0,u.default)(e.id!==void 0&&e.id!==null,"id must be provided");let s=new this(e.id,e.requestId,e.owner,e.shares);return Object.assign(s,e),s}};var w=i(require("assert")),R=class{constructor(e,s,o,r,y){this.id=e,this.requestId=s,this.owner=o,this.shares=r,this.assetsPaid=y}get _name(){return"RedeemExecuted"}async save(){let e=this.id;(0,w.default)(e!==null,"Cannot save RedeemExecuted entity without an ID"),await store.set("RedeemExecuted",e.toString(),this)}static async remove(e){(0,w.default)(e!==null,"Cannot remove RedeemExecuted entity without an ID"),await store.remove("RedeemExecuted",e.toString())}static async get(e){(0,w.default)(e!=null,"Cannot get RedeemExecuted entity without an ID");let s=await store.get("RedeemExecuted",e.toString());if(s)return this.create(s)}static async getByRequestId(e,s){return(await store.getByField("RedeemExecuted","requestId",e,s)).map(r=>this.create(r))}static async getByOwner(e,s){return(await store.getByField("RedeemExecuted","owner",e,s)).map(r=>this.create(r))}static async getByFields(e,s){return(await store.getByFields("RedeemExecuted",e,s)).map(r=>this.create(r))}static create(e){(0,w.default)(e.id!==void 0&&e.id!==null,"id must be provided");let s=new this(e.id,e.requestId,e.owner,e.shares,e.assetsPaid);return Object.assign(s,e),s}};async function O(t){logger.info(`New deposit transaction log at block ${t.blockNumber}`),(0,C.default)(t.args,"No log.args"),logger.info("handleDeposit========================================"),logger.info(`handleDeposit.address: ${t.address}`),logger.info(`handleDeposit.blockNumber: ${t.blockNumber}`),logger.info(`handleDeposit.transactionHash: ${t.transactionHash}`),logger.info(`handleDeposit.transaction.blockTimestamp: ${t.transaction.blockTimestamp}`),logger.info(`handleDeposit.args.sender: ${t.args.sender}`),logger.info(`handleDeposit.args.owner: ${t.args.owner}`),logger.info(`handleDeposit.args.assets: ${t.args.assets}`),logger.info(`handleDeposit.args.shares: ${t.args.shares}`),logger.info("handleDeposit========================================"),await a.create({id:t.transactionHash,blockHeight:BigInt(t.blockNumber),owner:t.args.owner.toString(),assets:BigInt(t.args.assets.toString()),shares:BigInt(t.args.shares.toString()),timestamp:new Date(Number(t.transaction.blockTimestamp)*1e3)}).save()}async function B(t){logger.info(`New withdraw transaction log at block ${t.blockNumber}`),(0,C.default)(t.args,"No withdraw.args"),logger.info("handleWithdraw========================================"),logger.info(`handleWithdraw.address: ${t.address}`),logger.info(`handleWithdraw.blockNumber: ${t.blockNumber}`),logger.info(`handleWithdraw.transactionHash: ${t.transactionHash}`),logger.info(`handleWithdraw.transaction.blockTimestamp: ${t.transaction.blockTimestamp}`),logger.info(`handleWithdraw.args.sender: ${t.args.sender}`),logger.info(`handleWithdraw.args.receiver: ${t.args.receiver}`),logger.info(`handleWithdraw.args.owner: ${t.args.owner}`),logger.info(`handleWithdraw.args.assets: ${t.args.assets}`),logger.info(`handleWithdraw.args.shares: ${t.args.shares}`),logger.info("handleWithdraw========================================"),await p.create({id:t.transactionHash,blockHeight:BigInt(t.blockNumber),sender:t.args.sender.toString(),receiver:t.args.receiver.toString(),owner:t.args.owner.toString(),assets:BigInt(t.args.assets.toString()),shares:BigInt(t.args.shares.toString()),timestamp:new Date(Number(t.transaction.blockTimestamp)*1e3)}).save()}var b=i(require("assert"));async function W(t){logger.info(`New redeemRequested transaction log at block ${t.blockNumber}`),(0,b.default)(t.args,"No redeemRequested.args"),logger.info("redeemRequested========================================"),logger.info(`redeemRequested.address: ${t.address}`),logger.info(`redeemRequested.blockNumber: ${t.blockNumber}`),logger.info(`redeemRequested.transactionHash: ${t.transactionHash}`),logger.info(`redeemRequested.transaction.blockTimestamp: ${t.transaction.blockTimestamp}`),logger.info(`redeemRequested.args.requestId: ${t.args.requestId}`),logger.info(`redeemRequested.args.owner: ${t.args.owner}`),logger.info(`redeemRequested.args.shares: ${t.args.shares}`),logger.info("redeemRequested========================================"),await g.create({id:t.transactionHash,blockHeight:BigInt(t.blockNumber),requestId:BigInt(t.args.requestId.toString()),owner:t.args.owner.toLowerCase(),shares:BigInt(t.args.shares.toString()),timestamp:new Date(Number(t.transaction.blockTimestamp)*1e3)}).save()}async function F(t){logger.info(`New redeemCancelled transaction log at block ${t.blockNumber}`),(0,b.default)(t.args,"No redeemCancelled.args"),logger.info("redeemCancelled========================================"),logger.info(`redeemCancelled.address: ${t.address}`),logger.info(`redeemCancelled.blockNumber: ${t.blockNumber}`),logger.info(`redeemCancelled.transactionHash: ${t.transactionHash}`),logger.info(`redeemCancelled.transaction.blockTimestamp: ${t.transaction.blockTimestamp}`),logger.info(`redeemCancelled.args.requestId: ${t.args.requestId}`),logger.info(`redeemCancelled.args.owner: ${t.args.owner}`),logger.info(`redeemCancelled.args.shares: ${t.args.shares}`),logger.info("redeemCancelled========================================"),await l.create({id:t.transactionHash,blockHeight:BigInt(t.blockNumber),requestId:BigInt(t.args.requestId.toString()),owner:t.args.owner.toLowerCase(),shares:BigInt(t.args.shares.toString()),timestamp:new Date(Number(t.transaction.blockTimestamp)*1e3)}).save()}async function $(t){logger.info(`New redeemApproved transaction log at block ${t.blockNumber}`),(0,b.default)(t.args,"No redeemApproved.args"),logger.info("redeemApproved========================================"),logger.info(`redeemApproved.address: ${t.address}`),logger.info(`redeemApproved.blockNumber: ${t.blockNumber}`),logger.info(`redeemApproved.transactionHash: ${t.transactionHash}`),logger.info(`redeemApproved.transaction.blockTimestamp: ${t.transaction.blockTimestamp}`),logger.info(`redeemApproved.args.requestId: ${t.args.requestId}`),logger.info(`redeemApproved.args.owner: ${t.args.owner}`),logger.info(`redeemApproved.args.shares: ${t.args.shares}`),logger.info("redeemApproved========================================"),await h.create({id:t.transactionHash,blockHeight:BigInt(t.blockNumber),requestId:BigInt(t.args.requestId.toString()),owner:t.args.owner.toLowerCase(),shares:BigInt(t.args.shares.toString()),timestamp:new Date(Number(t.transaction.blockTimestamp)*1e3)}).save()}async function A(t){logger.info(`New redeemExecuted transaction log at block ${t.blockNumber}`),(0,b.default)(t.args,"No redeemExecuted.args"),logger.info("redeemExecuted========================================"),logger.info(`redeemExecuted.address: ${t.address}`),logger.info(`redeemExecuted.blockNumber: ${t.blockNumber}`),logger.info(`redeemExecuted.transactionHash: ${t.transactionHash}`),logger.info(`redeemExecuted.transaction.blockTimestamp: ${t.transaction.blockTimestamp}`),logger.info(`redeemExecuted.args.requestId: ${t.args.requestId}`),logger.info(`redeemExecuted.args.owner: ${t.args.owner}`),logger.info(`redeemExecuted.args.shares: ${t.args.shares}`),logger.info(`redeemExecuted.args.assetsPaid: ${t.args.assetsPaid}`),logger.info("redeemExecuted========================================"),await R.create({id:t.transactionHash,blockHeight:BigInt(t.blockNumber),requestId:BigInt(t.args.requestId.toString()),owner:t.args.owner.toLowerCase(),shares:BigInt(t.args.shares.toString()),assetsPaid:BigInt(t.args.assetsPaid.toString()),timestamp:new Date(Number(t.transaction.blockTimestamp)*1e3)}).save()}0&&(module.exports={handleDeposit,handleRedeemApproved,handleRedeemCancelled,handleRedeemExecuted,handleRedeemRequested,handleWithdraw});
//# sourceMappingURL=data:application/json;base64,
