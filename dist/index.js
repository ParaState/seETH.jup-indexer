"use strict";var w=Object.create;var b=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var S=Object.getPrototypeOf,C=Object.prototype.hasOwnProperty;var N=(e,t)=>{for(var r in t)b(e,r,{get:t[r],enumerable:!0})},P=(e,t,r,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of A(t))!C.call(e,n)&&n!==r&&b(e,n,{get:()=>t[n],enumerable:!(s=h(t,n))||s.enumerable});return e};var o=(e,t,r)=>(r=e!=null?w(S(e)):{},P(t||!e||!e.__esModule?b(r,"default",{value:e,enumerable:!0}):r,e)),T=e=>P(b({},"__esModule",{value:!0}),e);var I={};N(I,{handleLog:()=>E,handleStakedLog:()=>x,handleTransaction:()=>F,handleUnstakeAcceptedLog:()=>O,handleUnstakeFinishedLog:()=>U});module.exports=T(I);var p=o(require("assert")),c=class{constructor(t,r,s,n,y){this.id=t,this.to=r,this.from=s,this.value=n,this.contractAddress=y}get _name(){return"Transfer"}async save(){let t=this.id;(0,p.default)(t!==null,"Cannot save Transfer entity without an ID"),await store.set("Transfer",t.toString(),this)}static async remove(t){(0,p.default)(t!==null,"Cannot remove Transfer entity without an ID"),await store.remove("Transfer",t.toString())}static async get(t){(0,p.default)(t!=null,"Cannot get Transfer entity without an ID");let r=await store.get("Transfer",t.toString());if(r)return this.create(r)}static async getByFields(t,r){return(await store.getByFields("Transfer",t,r)).map(n=>this.create(n))}static create(t){(0,p.default)(t.id!==void 0&&t.id!==null,"id must be provided");let r=new this(t.id,t.to,t.from,t.value,t.contractAddress);return Object.assign(r,t),r}};var d=o(require("assert")),g=class{constructor(t,r,s,n,y){this.id=t,this.owner=r,this.spender=s,this.value=n,this.contractAddress=y}get _name(){return"Approval"}async save(){let t=this.id;(0,d.default)(t!==null,"Cannot save Approval entity without an ID"),await store.set("Approval",t.toString(),this)}static async remove(t){(0,d.default)(t!==null,"Cannot remove Approval entity without an ID"),await store.remove("Approval",t.toString())}static async get(t){(0,d.default)(t!=null,"Cannot get Approval entity without an ID");let r=await store.get("Approval",t.toString());if(r)return this.create(r)}static async getByFields(t,r){return(await store.getByFields("Approval",t,r)).map(n=>this.create(n))}static create(t){(0,d.default)(t.id!==void 0&&t.id!==null,"id must be provided");let r=new this(t.id,t.owner,t.spender,t.value,t.contractAddress);return Object.assign(r,t),r}};var m=o(require("assert")),l=class{constructor(t){this.id=t}get _name(){return"StakedRecord"}async save(){let t=this.id;(0,m.default)(t!==null,"Cannot save StakedRecord entity without an ID"),await store.set("StakedRecord",t.toString(),this)}static async remove(t){(0,m.default)(t!==null,"Cannot remove StakedRecord entity without an ID"),await store.remove("StakedRecord",t.toString())}static async get(t){(0,m.default)(t!=null,"Cannot get StakedRecord entity without an ID");let r=await store.get("StakedRecord",t.toString());if(r)return this.create(r)}static async getByFields(t,r){return(await store.getByFields("StakedRecord",t,r)).map(n=>this.create(n))}static create(t){(0,m.default)(t.id!==void 0&&t.id!==null,"id must be provided");let r=new this(t.id);return Object.assign(r,t),r}};var u=o(require("assert")),i=class{constructor(t){this.id=t}get _name(){return"Staker"}async save(){let t=this.id;(0,u.default)(t!==null,"Cannot save Staker entity without an ID"),await store.set("Staker",t.toString(),this)}static async remove(t){(0,u.default)(t!==null,"Cannot remove Staker entity without an ID"),await store.remove("Staker",t.toString())}static async get(t){(0,u.default)(t!=null,"Cannot get Staker entity without an ID");let r=await store.get("Staker",t.toString());if(r)return this.create(r)}static async getByFields(t,r){return(await store.getByFields("Staker",t,r)).map(n=>this.create(n))}static create(t){(0,u.default)(t.id!==void 0&&t.id!==null,"id must be provided");let r=new this(t.id);return Object.assign(r,t),r}};var k=o(require("assert")),a=class{constructor(t){this.id=t}get _name(){return"UnstakeAccepted"}async save(){let t=this.id;(0,k.default)(t!==null,"Cannot save UnstakeAccepted entity without an ID"),await store.set("UnstakeAccepted",t.toString(),this)}static async remove(t){(0,k.default)(t!==null,"Cannot remove UnstakeAccepted entity without an ID"),await store.remove("UnstakeAccepted",t.toString())}static async get(t){(0,k.default)(t!=null,"Cannot get UnstakeAccepted entity without an ID");let r=await store.get("UnstakeAccepted",t.toString());if(r)return this.create(r)}static async getByFields(t,r){return(await store.getByFields("UnstakeAccepted",t,r)).map(n=>this.create(n))}static create(t){(0,k.default)(t.id!==void 0&&t.id!==null,"id must be provided");let r=new this(t.id);return Object.assign(r,t),r}};var v=o(require("assert"));async function E(e){logger.info(`New transfer transaction log at block ${e.blockNumber}`),(0,v.default)(e.args,"No log.args"),await c.create({id:e.transactionHash,blockHeight:BigInt(e.blockNumber),to:e.args.to,from:e.args.from,value:e.args.value.toBigInt(),contractAddress:e.address}).save()}async function F(e){logger.info(`New Approval transaction at block ${e.blockNumber}`),(0,v.default)(e.args,"No tx.args"),await g.create({id:e.hash,owner:e.from,spender:await e.args[0],value:BigInt(await e.args[1].toString()),contractAddress:e.to||""}).save()}var f=o(require("assert"));async function x(e){logger.info(`New staked transaction log at block ${e.blockNumber}`),(0,f.default)(e.args,"No staked.args"),await l.create({id:e.transactionHash,pool:e.address,blockHeight:BigInt(e.blockNumber),staker:e.args.staker,stakeToken:"0x000",stakeAmount:e.args.amount.toBigInt(),mintReceiver:e.args.receiver,mintAmount:e.args.minted.toBigInt(),timestamp:new Date(Number(e.transaction.blockTimestamp)*1e3)}).save();let r=`${e.address}-${e.args.staker}`,s=await i.get(r);s?(s.mintAmount=e.args.minted.toBigInt()+s.mintAmount,s.stakeAmount=e.args.amount.toBigInt()+s.stakeAmount):s=await i.create({id:r,pool:e.address,staker:e.args.staker,stakeAmount:e.args.amount.toBigInt(),mintAmount:e.args.minted.toBigInt()}),await s.save()}async function O(e){logger.info(`New unstake accepted transaction log at block ${e.blockNumber}`),(0,f.default)(e.args,"No unstake.args"),logger.info("unstake========================================"),logger.info(`unstake.address: ${e.address}`),logger.info(`unstake.blockNumber: ${e.blockNumber}`),logger.info(`unstake.transactionHash: ${e.transactionHash}`),logger.info(`unstake.transaction.blockTimestamp: ${e.transaction.blockTimestamp}`),logger.info(`unstake.args.accept_id: ${e.args.accept_id}`),logger.info(`unstake.args.staker: ${e.args.staker}`),logger.info(`unstake.args.receiver: ${e.args.receiver}`),logger.info(`unstake.args.unstake_amount: ${e.args.unstake_amount}`),logger.info(`unstake.args.redeem_earning: ${e.args.redeem_earning}`),logger.info(`unstake.args.redeem_eth: ${e.args.redeem_eth}`),logger.info(`unstake.args.redeem_usdc: ${e.args.redeem_usdc}`),logger.info(`unstake.args: ${JSON.stringify(e.args)}`),logger.info(`unstake.args.accept_id: ${e.args.accept_id}`),logger.info("unstake========================================"),await a.create({id:e.args.accept_id.toString(),txHash:e.transactionHash,pool:e.address,blockHeight:BigInt(e.blockNumber),staker:e.args.staker,unstakeToken:e.address,unstakeAmount:e.args.unstake_amount.toBigInt(),redeemEarning:e.args.redeem_earning.toBigInt(),redeemEth:e.args.redeem_eth.toBigInt(),redeemUsdc:e.args.redeem_usdc.toBigInt(),status:"pending",timestamp:new Date(Number(e.transaction.blockTimestamp)*1e3)}).save()}async function U(e){logger.info(`New unstake finished transaction log at block ${e.blockNumber}`),(0,f.default)(e.args,"No finished.args");let t=await a.get(e.args.accept_id.toString());t&&t.status==="pending"&&(t.status="success",await t.save())}0&&(module.exports={handleLog,handleStakedLog,handleTransaction,handleUnstakeAcceptedLog,handleUnstakeFinishedLog});
//# sourceMappingURL=data:application/json;base64,
