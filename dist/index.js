"use strict";var R=Object.create;var h=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var k=Object.getPrototypeOf,D=Object.prototype.hasOwnProperty;var $=(e,t)=>{for(var s in t)h(e,s,{get:t[s],enumerable:!0})},w=(e,t,s,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of y(t))!D.call(e,r)&&r!==s&&h(e,r,{get:()=>t[r],enumerable:!(o=P(t,r))||o.enumerable});return e};var n=(e,t,s)=>(s=e!=null?R(k(e)):{},w(t||!e||!e.__esModule?h(s,"default",{value:e,enumerable:!0}):s,e)),q=e=>w(h({},"__esModule",{value:!0}),e);var T={};$(T,{handleDeposit:()=>v,handleRedeemApproved:()=>C,handleRedeemCancelled:()=>x,handleRedeemExecuted:()=>I,handleRedeemRequested:()=>N,handleWithdraw:()=>W});module.exports=q(T);var b=n(require("assert"));var g=n(require("assert")),c=class{constructor(t,s,o,r){this.id=t,this.owner=s,this.assets=o,this.shares=r}get _name(){return"Deposit"}async save(){let t=this.id;(0,g.default)(t!==null,"Cannot save Deposit entity without an ID"),await store.set("Deposit",t.toString(),this)}static async remove(t){(0,g.default)(t!==null,"Cannot remove Deposit entity without an ID"),await store.remove("Deposit",t.toString())}static async get(t){(0,g.default)(t!=null,"Cannot get Deposit entity without an ID");let s=await store.get("Deposit",t.toString());if(s)return this.create(s)}static async getByOwner(t,s){return(await store.getByField("Deposit","owner",t,s)).map(r=>this.create(r))}static async getByFields(t,s){return(await store.getByFields("Deposit",t,s)).map(r=>this.create(r))}static create(t){(0,g.default)(t.id!==void 0&&t.id!==null,"id must be provided");let s=new this(t.id,t.owner,t.assets,t.shares);return Object.assign(s,t),s}};var d=n(require("assert")),l=class{constructor(t,s,o,r,a,u){this.id=t,this.sender=s,this.receiver=o,this.owner=r,this.assets=a,this.shares=u}get _name(){return"Withdraw"}async save(){let t=this.id;(0,d.default)(t!==null,"Cannot save Withdraw entity without an ID"),await store.set("Withdraw",t.toString(),this)}static async remove(t){(0,d.default)(t!==null,"Cannot remove Withdraw entity without an ID"),await store.remove("Withdraw",t.toString())}static async get(t){(0,d.default)(t!=null,"Cannot get Withdraw entity without an ID");let s=await store.get("Withdraw",t.toString());if(s)return this.create(s)}static async getBySender(t,s){return(await store.getByField("Withdraw","sender",t,s)).map(r=>this.create(r))}static async getByReceiver(t,s){return(await store.getByField("Withdraw","receiver",t,s)).map(r=>this.create(r))}static async getByOwner(t,s){return(await store.getByField("Withdraw","owner",t,s)).map(r=>this.create(r))}static async getByFields(t,s){return(await store.getByFields("Withdraw",t,s)).map(r=>this.create(r))}static create(t){(0,d.default)(t.id!==void 0&&t.id!==null,"id must be provided");let s=new this(t.id,t.sender,t.receiver,t.owner,t.assets,t.shares);return Object.assign(s,t),s}};var p=n(require("assert")),i=class{constructor(t,s,o,r,a,u,f){this.id=t,this.owner=s,this.shares=o,this.requestTime=r,this.approved=a,this.executed=u,this.cancelled=f}get _name(){return"RedeemRequest"}async save(){let t=this.id;(0,p.default)(t!==null,"Cannot save RedeemRequest entity without an ID"),await store.set("RedeemRequest",t.toString(),this)}static async remove(t){(0,p.default)(t!==null,"Cannot remove RedeemRequest entity without an ID"),await store.remove("RedeemRequest",t.toString())}static async get(t){(0,p.default)(t!=null,"Cannot get RedeemRequest entity without an ID");let s=await store.get("RedeemRequest",t.toString());if(s)return this.create(s)}static async getByOwner(t,s){return(await store.getByField("RedeemRequest","owner",t,s)).map(r=>this.create(r))}static async getByFields(t,s){return(await store.getByFields("RedeemRequest",t,s)).map(r=>this.create(r))}static create(t){(0,p.default)(t.id!==void 0&&t.id!==null,"id must be provided");let s=new this(t.id,t.owner,t.shares,t.requestTime,t.approved,t.executed,t.cancelled);return Object.assign(s,t),s}};async function v(e){logger.info(`New deposit transaction log at block ${e.blockNumber}`),(0,b.default)(e.args,"No log.args"),logger.info("handleDeposit========================================"),logger.info(`handleDeposit.address: ${e.address}`),logger.info(`handleDeposit.blockNumber: ${e.blockNumber}`),logger.info(`handleDeposit.transactionHash: ${e.transactionHash}`),logger.info(`handleDeposit.transaction.blockTimestamp: ${e.transaction.blockTimestamp}`),logger.info(`handleDeposit.args.sender: ${e.args.sender}`),logger.info(`handleDeposit.args.owner: ${e.args.owner}`),logger.info(`handleDeposit.args.assets: ${e.args.assets}`),logger.info(`handleDeposit.args.shares: ${e.args.shares}`),logger.info("handleDeposit========================================"),await c.create({id:e.transactionHash,blockHeight:BigInt(e.blockNumber),owner:e.args.owner.toString(),assets:BigInt(e.args.assets.toString()),shares:BigInt(e.args.shares.toString()),timestamp:new Date(Number(e.transaction.blockTimestamp)*1e3)}).save()}async function W(e){logger.info(`New withdraw transaction log at block ${e.blockNumber}`),(0,b.default)(e.args,"No withdraw.args"),logger.info("handleWithdraw========================================"),logger.info(`handleWithdraw.address: ${e.address}`),logger.info(`handleWithdraw.blockNumber: ${e.blockNumber}`),logger.info(`handleWithdraw.transactionHash: ${e.transactionHash}`),logger.info(`handleWithdraw.transaction.blockTimestamp: ${e.transaction.blockTimestamp}`),logger.info(`handleWithdraw.args.sender: ${e.args.sender}`),logger.info(`handleWithdraw.args.receiver: ${e.args.receiver}`),logger.info(`handleWithdraw.args.owner: ${e.args.owner}`),logger.info(`handleWithdraw.args.assets: ${e.args.assets}`),logger.info(`handleWithdraw.args.shares: ${e.args.shares}`),logger.info("handleWithdraw========================================"),await l.create({id:e.transactionHash,blockHeight:BigInt(e.blockNumber),sender:e.args.sender.toString(),receiver:e.args.receiver.toString(),owner:e.args.owner.toString(),assets:BigInt(e.args.assets.toString()),shares:BigInt(e.args.shares.toString()),timestamp:new Date(Number(e.transaction.blockTimestamp)*1e3)}).save()}var m=n(require("assert"));async function N(e){logger.info(`New redeemRequested transaction log at block ${e.blockNumber}`),(0,m.default)(e.args,"No redeemRequested.args"),logger.info("redeemRequested========================================"),logger.info(`redeemRequested.address: ${e.address}`),logger.info(`redeemRequested.blockNumber: ${e.blockNumber}`),logger.info(`redeemRequested.transactionHash: ${e.transactionHash}`),logger.info(`redeemRequested.transaction.blockTimestamp: ${e.transaction.blockTimestamp}`),logger.info(`redeemRequested.args.requestId: ${e.args.requestId}`),logger.info(`redeemRequested.args.owner: ${e.args.owner}`),logger.info(`redeemRequested.args.shares: ${e.args.shares}`),logger.info("redeemRequested========================================");let t=e.args.requestId.toString(),s=e.args.owner,o=BigInt(e.args.shares.toString()),r=BigInt(e.transaction.blockTimestamp.toString()),a=new Date(Number(e.transaction.blockTimestamp)*1e3);logger.info(`Creating new RedeemRequest: ${t} for owner: ${s} with shares: ${o}`),await i.create({id:t,blockHeight:BigInt(e.blockNumber),owner:s,shares:o,requestTime:r,approved:!1,executed:!1,cancelled:!1,createdAt:a,updatedAt:a,requestedTxHash:e.transactionHash}).save()}async function x(e){logger.info(`New redeemCancelled transaction log at block ${e.blockNumber}`),(0,m.default)(e.args,"No redeemCancelled.args"),logger.info("redeemCancelled========================================"),logger.info(`redeemCancelled.address: ${e.address}`),logger.info(`redeemCancelled.blockNumber: ${e.blockNumber}`),logger.info(`redeemCancelled.transactionHash: ${e.transactionHash}`),logger.info(`redeemCancelled.transaction.blockTimestamp: ${e.transaction.blockTimestamp}`),logger.info(`redeemCancelled.args.requestId: ${e.args.requestId}`),logger.info(`redeemCancelled.args.owner: ${e.args.owner}`),logger.info(`redeemCancelled.args.shares: ${e.args.shares}`),logger.info("redeemCancelled========================================");let t=e.args.requestId.toString(),s=new Date(Number(e.transaction.blockTimestamp)*1e3),o=new Date(Number(e.transaction.blockTimestamp)*1e3);logger.info(`Cancelling RedeemRequest: ${t}`);let r=await i.get(t);if(r){if(r.cancelled){logger.warn(`RedeemRequest ${t} already cancelled`);return}r.cancelled=!0,r.updatedAt=s,r.cancelledTxHash=e.transactionHash,r.cancelledAt=o,await r.save()}else logger.warn(`RedeemRequest ${t} not found for cancellation`)}async function C(e){logger.info(`New redeemApproved transaction log at block ${e.blockNumber}`),(0,m.default)(e.args,"No redeemApproved.args"),logger.info("redeemApproved========================================"),logger.info(`redeemApproved.address: ${e.address}`),logger.info(`redeemApproved.blockNumber: ${e.blockNumber}`),logger.info(`redeemApproved.transactionHash: ${e.transactionHash}`),logger.info(`redeemApproved.transaction.blockTimestamp: ${e.transaction.blockTimestamp}`),logger.info(`redeemApproved.args.requestId: ${e.args.requestId}`),logger.info(`redeemApproved.args.owner: ${e.args.owner}`),logger.info(`redeemApproved.args.shares: ${e.args.shares}`),logger.info("redeemApproved========================================");let t=e.args.requestId.toString(),s=new Date(Number(e.transaction.blockTimestamp)*1e3),o=new Date(Number(e.transaction.blockTimestamp)*1e3);logger.info(`Approving RedeemRequest: ${t}`);let r=await i.get(t);if(r){if(r.approved){logger.warn(`RedeemRequest ${t} already approved`);return}r.approved=!0,r.updatedAt=s,r.approvedTxHash=e.transactionHash,r.approvedAt=o,await r.save()}else logger.warn(`RedeemRequest ${t} not found for approval`)}async function I(e){logger.info(`New redeemExecuted transaction log at block ${e.blockNumber}`),(0,m.default)(e.args,"No redeemExecuted.args"),logger.info("redeemExecuted========================================"),logger.info(`redeemExecuted.address: ${e.address}`),logger.info(`redeemExecuted.blockNumber: ${e.blockNumber}`),logger.info(`redeemExecuted.transactionHash: ${e.transactionHash}`),logger.info(`redeemExecuted.transaction.blockTimestamp: ${e.transaction.blockTimestamp}`),logger.info(`redeemExecuted.args.requestId: ${e.args.requestId}`),logger.info(`redeemExecuted.args.owner: ${e.args.owner}`),logger.info(`redeemExecuted.args.shares: ${e.args.shares}`),logger.info(`redeemExecuted.args.assetsPaid: ${e.args.assetsPaid}`),logger.info("redeemExecuted========================================");let t=e.args.requestId.toString(),s=BigInt(e.args.assetsPaid.toString()),o=new Date(Number(e.transaction.blockTimestamp)*1e3),r=new Date(Number(e.transaction.blockTimestamp)*1e3);logger.info(`Executing RedeemRequest: ${t} with assetsPaid: ${s}`);let a=await i.get(t);if(a){if(a.executed){logger.warn(`RedeemRequest ${t} already executed`);return}a.executed=!0,a.assetsPaid=s,a.updatedAt=o,a.executedTxHash=e.transactionHash,a.executedAt=r,await a.save()}else logger.warn(`RedeemRequest ${t} not found for execution`)}0&&(module.exports={handleDeposit,handleRedeemApproved,handleRedeemCancelled,handleRedeemExecuted,handleRedeemRequested,handleWithdraw});
//# sourceMappingURL=data:application/json;base64,
