/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface SeETHRedeemInterface extends utils.Interface {
  functions: {
    "APPROVER_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "KEEPER_ROLE()": FunctionFragment;
    "UPGRADE_INTERFACE_VERSION()": FunctionFragment;
    "approveRedeem(uint256)": FunctionFragment;
    "approver()": FunctionFragment;
    "cancelRedeem(uint256)": FunctionFragment;
    "core()": FunctionFragment;
    "executeRedeem(uint256)": FunctionFragment;
    "getRedeemRequest(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getUserRequests(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address,address,uint256)": FunctionFragment;
    "keeper()": FunctionFragment;
    "manager()": FunctionFragment;
    "minRequestWaitTime()": FunctionFragment;
    "nextRequestId()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "redeemRequest(uint256)": FunctionFragment;
    "redeemRequests(uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAccounts(address,address)": FunctionFragment;
    "setMinRequestWaitTime(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "userRedeemRequests(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "APPROVER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "KEEPER_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "approveRedeem"
      | "approver"
      | "cancelRedeem"
      | "core"
      | "executeRedeem"
      | "getRedeemRequest"
      | "getRoleAdmin"
      | "getUserRequests"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "keeper"
      | "manager"
      | "minRequestWaitTime"
      | "nextRequestId"
      | "proxiableUUID"
      | "redeemRequest"
      | "redeemRequests"
      | "renounceRole"
      | "revokeRole"
      | "setAccounts"
      | "setMinRequestWaitTime"
      | "supportsInterface"
      | "upgradeToAndCall"
      | "userRedeemRequests"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "APPROVER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KEEPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "approver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedeemRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRequests",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minRequestWaitTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccounts",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinRequestWaitTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userRedeemRequests",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "APPROVER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KEEPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minRequestWaitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinRequestWaitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRedeemRequests",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint64)": EventFragment;
    "RedeemApproved(uint256,address,uint256)": EventFragment;
    "RedeemCancelled(uint256,address,uint256)": EventFragment;
    "RedeemExecuted(uint256,address,uint256,uint256)": EventFragment;
    "RedeemRequested(uint256,address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RedeemApprovedEventObject {
  requestId: BigNumber;
  owner: string;
  shares: BigNumber;
}
export type RedeemApprovedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RedeemApprovedEventObject
>;

export type RedeemApprovedEventFilter = TypedEventFilter<RedeemApprovedEvent>;

export interface RedeemCancelledEventObject {
  requestId: BigNumber;
  owner: string;
  shares: BigNumber;
}
export type RedeemCancelledEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RedeemCancelledEventObject
>;

export type RedeemCancelledEventFilter = TypedEventFilter<RedeemCancelledEvent>;

export interface RedeemExecutedEventObject {
  requestId: BigNumber;
  owner: string;
  shares: BigNumber;
  assetsPaid: BigNumber;
}
export type RedeemExecutedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  RedeemExecutedEventObject
>;

export type RedeemExecutedEventFilter = TypedEventFilter<RedeemExecutedEvent>;

export interface RedeemRequestedEventObject {
  requestId: BigNumber;
  owner: string;
  shares: BigNumber;
}
export type RedeemRequestedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RedeemRequestedEventObject
>;

export type RedeemRequestedEventFilter = TypedEventFilter<RedeemRequestedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface SeETHRedeem extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SeETHRedeemInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    APPROVER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    approveRedeem(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approver(overrides?: CallOverrides): Promise<[string]>;

    cancelRedeem(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    core(overrides?: CallOverrides): Promise<[string]>;

    executeRedeem(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getRedeemRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, boolean, boolean] & {
        owner: string;
        shares: BigNumber;
        requestTime: BigNumber;
        executed: boolean;
        cancelled: boolean;
        approved: boolean;
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getUserRequests(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      coreVault: string,
      _manager: string,
      _keeper: string,
      _approver: string,
      _minRequestWaitTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    minRequestWaitTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextRequestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    redeemRequest(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    redeemRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, boolean, boolean] & {
        owner: string;
        shares: BigNumber;
        requestTime: BigNumber;
        approved: boolean;
        executed: boolean;
        cancelled: boolean;
      }
    >;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAccounts(
      newKeeper: string,
      newApprover: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMinRequestWaitTime(
      newWait: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    userRedeemRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  APPROVER_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

  UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

  approveRedeem(
    requestId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approver(overrides?: CallOverrides): Promise<string>;

  cancelRedeem(
    requestId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  core(overrides?: CallOverrides): Promise<string>;

  executeRedeem(
    requestId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getRedeemRequest(
    requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean, boolean, boolean] & {
      owner: string;
      shares: BigNumber;
      requestTime: BigNumber;
      executed: boolean;
      cancelled: boolean;
      approved: boolean;
    }
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getUserRequests(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    coreVault: string,
    _manager: string,
    _keeper: string,
    _approver: string,
    _minRequestWaitTime: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  keeper(overrides?: CallOverrides): Promise<string>;

  manager(overrides?: CallOverrides): Promise<string>;

  minRequestWaitTime(overrides?: CallOverrides): Promise<BigNumber>;

  nextRequestId(overrides?: CallOverrides): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  redeemRequest(
    shares: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  redeemRequests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean, boolean, boolean] & {
      owner: string;
      shares: BigNumber;
      requestTime: BigNumber;
      approved: boolean;
      executed: boolean;
      cancelled: boolean;
    }
  >;

  renounceRole(
    role: BytesLike,
    callerConfirmation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAccounts(
    newKeeper: string,
    newApprover: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMinRequestWaitTime(
    newWait: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  userRedeemRequests(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    APPROVER_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

    approveRedeem(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approver(overrides?: CallOverrides): Promise<string>;

    cancelRedeem(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    core(overrides?: CallOverrides): Promise<string>;

    executeRedeem(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRedeemRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, boolean, boolean] & {
        owner: string;
        shares: BigNumber;
        requestTime: BigNumber;
        executed: boolean;
        cancelled: boolean;
        approved: boolean;
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getUserRequests(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      coreVault: string,
      _manager: string,
      _keeper: string,
      _approver: string,
      _minRequestWaitTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    keeper(overrides?: CallOverrides): Promise<string>;

    manager(overrides?: CallOverrides): Promise<string>;

    minRequestWaitTime(overrides?: CallOverrides): Promise<BigNumber>;

    nextRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    redeemRequest(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, boolean, boolean] & {
        owner: string;
        shares: BigNumber;
        requestTime: BigNumber;
        approved: boolean;
        executed: boolean;
        cancelled: boolean;
      }
    >;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAccounts(
      newKeeper: string,
      newApprover: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinRequestWaitTime(
      newWait: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    userRedeemRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RedeemApproved(uint256,address,uint256)"(
      requestId?: BigNumberish | null,
      owner?: string | null,
      shares?: null
    ): RedeemApprovedEventFilter;
    RedeemApproved(
      requestId?: BigNumberish | null,
      owner?: string | null,
      shares?: null
    ): RedeemApprovedEventFilter;

    "RedeemCancelled(uint256,address,uint256)"(
      requestId?: BigNumberish | null,
      owner?: string | null,
      shares?: null
    ): RedeemCancelledEventFilter;
    RedeemCancelled(
      requestId?: BigNumberish | null,
      owner?: string | null,
      shares?: null
    ): RedeemCancelledEventFilter;

    "RedeemExecuted(uint256,address,uint256,uint256)"(
      requestId?: BigNumberish | null,
      owner?: string | null,
      shares?: null,
      assetsPaid?: null
    ): RedeemExecutedEventFilter;
    RedeemExecuted(
      requestId?: BigNumberish | null,
      owner?: string | null,
      shares?: null,
      assetsPaid?: null
    ): RedeemExecutedEventFilter;

    "RedeemRequested(uint256,address,uint256)"(
      requestId?: BigNumberish | null,
      owner?: string | null,
      shares?: null
    ): RedeemRequestedEventFilter;
    RedeemRequested(
      requestId?: BigNumberish | null,
      owner?: string | null,
      shares?: null
    ): RedeemRequestedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    APPROVER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    approveRedeem(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approver(overrides?: CallOverrides): Promise<BigNumber>;

    cancelRedeem(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    core(overrides?: CallOverrides): Promise<BigNumber>;

    executeRedeem(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getRedeemRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRequests(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      coreVault: string,
      _manager: string,
      _keeper: string,
      _approver: string,
      _minRequestWaitTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    minRequestWaitTime(overrides?: CallOverrides): Promise<BigNumber>;

    nextRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    redeemRequest(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    redeemRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAccounts(
      newKeeper: string,
      newApprover: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMinRequestWaitTime(
      newWait: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    userRedeemRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    APPROVER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPGRADE_INTERFACE_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveRedeem(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelRedeem(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeRedeem(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getRedeemRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRequests(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      coreVault: string,
      _manager: string,
      _keeper: string,
      _approver: string,
      _minRequestWaitTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minRequestWaitTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemRequest(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    redeemRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAccounts(
      newKeeper: string,
      newApprover: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMinRequestWaitTime(
      newWait: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userRedeemRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
