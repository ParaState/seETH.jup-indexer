/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface SsethInterface extends utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "NODE_ROLE()": FunctionFragment;
    "SIGNER_ROLE()": FunctionFragment;
    "__ERC20_init(string,string)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "checkRole(bytes32)": FunctionFragment;
    "decimals()": FunctionFragment;
    "finished_unstake_accept(uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address,string,string)": FunctionFragment;
    "name()": FunctionFragment;
    "pre_mint_amount(uint256)": FunctionFragment;
    "pre_redeem_amount(uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "set_usd_vault(address)": FunctionFragment;
    "stake(address,uint256)": FunctionFragment;
    "stake_eth(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "token_to_vault()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(bytes32,address)": FunctionFragment;
    "unstake(address,uint256)": FunctionFragment;
    "unstake_accept_id()": FunctionFragment;
    "unstake_accepted(uint256)": FunctionFragment;
    "usd_vault()": FunctionFragment;
    "version()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADMIN_ROLE"
      | "NODE_ROLE"
      | "SIGNER_ROLE"
      | "__ERC20_init"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "checkRole"
      | "decimals"
      | "finished_unstake_accept"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "name"
      | "pre_mint_amount"
      | "pre_redeem_amount"
      | "revokeRole"
      | "set_usd_vault"
      | "stake"
      | "stake_eth"
      | "symbol"
      | "token_to_vault"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "unstake"
      | "unstake_accept_id"
      | "unstake_accepted"
      | "usd_vault"
      | "version"
      | "weth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NODE_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SIGNER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__ERC20_init",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkRole",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finished_unstake_accept",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pre_mint_amount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pre_redeem_amount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "set_usd_vault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake_eth", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "token_to_vault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake_accept_id",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake_accepted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "usd_vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NODE_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SIGNER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__ERC20_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finished_unstake_accept",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pre_mint_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pre_redeem_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_usd_vault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake_eth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "token_to_vault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstake_accept_id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstake_accepted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usd_vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Borrowed(address,uint256)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "Staked(address,address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "ReferralBound(address,address)": EventFragment;
    "UnstakeAccepted(uint256,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "UnstakeFinished(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralBound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakeAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakeFinished"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BorrowedEventObject {
  receiver: string;
  amount: BigNumber;
}
export type BorrowedEvent = TypedEvent<
  [string, BigNumber],
  BorrowedEventObject
>;

export type BorrowedEventFilter = TypedEventFilter<BorrowedEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface StakedEventObject {
  staker: string;
  receiver: string;
  amount: BigNumber;
  minted: BigNumber;
}
export type StakedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ReferralBoundEventObject {
  user: string;
  referrer: string;
}
export type ReferralBoundEvent = TypedEvent<
  [string, string],
  ReferralBoundEventObject
>;

export type ReferralBoundEventFilter = TypedEventFilter<ReferralBoundEvent>;

export interface UnstakeAcceptedEventObject {
  accept_id: BigNumber;
  staker: string;
  receiver: string;
  unstake_amount: BigNumber;
  redeem_earning: BigNumber;
  withdraw_eth: BigNumber;
  repay_usdc: BigNumber;
}
export type UnstakeAcceptedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  UnstakeAcceptedEventObject
>;

export type UnstakeAcceptedEventFilter = TypedEventFilter<UnstakeAcceptedEvent>;

export interface UnstakeFinishedEventObject {
  accept_id: BigNumber;
}
export type UnstakeFinishedEvent = TypedEvent<
  [BigNumber],
  UnstakeFinishedEventObject
>;

export type UnstakeFinishedEventFilter = TypedEventFilter<UnstakeFinishedEvent>;

export interface Sseth extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SsethInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    NODE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SIGNER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    __ERC20_init(
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    checkRole(role: BytesLike, overrides?: CallOverrides): Promise<[void]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    finished_unstake_accept(
      accept_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _weth: string,
      _usd_vault: string,
      _token_to_vault: string,
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    pre_mint_amount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minted: BigNumber }>;

    pre_redeem_amount(
      repay_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        redeem_earning: BigNumber;
        redeem_eth: BigNumber;
        redeem_usdc: BigNumber;
      }
    >;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    set_usd_vault(
      _usd_vault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stake(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stake_eth(
      receiver: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    token_to_vault(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      role: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unstake(
      receiver: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unstake_accept_id(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    unstake_accepted(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        receiver: string;
        unstake_amount: BigNumber;
        redeem_earning: BigNumber;
        redeem_eth: BigNumber;
        redeem_usdc: BigNumber;
        accept_timestamp: BigNumber;
        status: number;
      }
    >;

    usd_vault(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  NODE_ROLE(overrides?: CallOverrides): Promise<string>;

  SIGNER_ROLE(overrides?: CallOverrides): Promise<string>;

  __ERC20_init(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  checkRole(role: BytesLike, overrides?: CallOverrides): Promise<void>;

  decimals(overrides?: CallOverrides): Promise<number>;

  finished_unstake_accept(
    accept_id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _weth: string,
    _usd_vault: string,
    _token_to_vault: string,
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  pre_mint_amount(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pre_redeem_amount(
    repay_amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      redeem_earning: BigNumber;
      redeem_eth: BigNumber;
      redeem_usdc: BigNumber;
    }
  >;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  set_usd_vault(
    _usd_vault: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stake(
    receiver: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stake_eth(
    receiver: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  token_to_vault(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    role: BytesLike,
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unstake(
    receiver: string,
    shares: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unstake_accept_id(overrides?: CallOverrides): Promise<BigNumber>;

  unstake_accepted(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
      receiver: string;
      unstake_amount: BigNumber;
      redeem_earning: BigNumber;
      redeem_eth: BigNumber;
      redeem_usdc: BigNumber;
      accept_timestamp: BigNumber;
      status: number;
    }
  >;

  usd_vault(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    NODE_ROLE(overrides?: CallOverrides): Promise<string>;

    SIGNER_ROLE(overrides?: CallOverrides): Promise<string>;

    __ERC20_init(
      name_: string,
      symbol_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkRole(role: BytesLike, overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    finished_unstake_accept(
      accept_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _weth: string,
      _usd_vault: string,
      _token_to_vault: string,
      name_: string,
      symbol_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    pre_mint_amount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pre_redeem_amount(
      repay_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        redeem_earning: BigNumber;
        redeem_eth: BigNumber;
        redeem_usdc: BigNumber;
      }
    >;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    set_usd_vault(_usd_vault: string, overrides?: CallOverrides): Promise<void>;

    stake(
      receiver: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake_eth(receiver: string, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    token_to_vault(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      role: BytesLike,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      receiver: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake_accept_id(overrides?: CallOverrides): Promise<BigNumber>;

    unstake_accepted(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        receiver: string;
        unstake_amount: BigNumber;
        redeem_earning: BigNumber;
        redeem_eth: BigNumber;
        redeem_usdc: BigNumber;
        accept_timestamp: BigNumber;
        status: number;
      }
    >;

    usd_vault(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Borrowed(address,uint256)"(
      receiver?: null,
      amount?: null
    ): BorrowedEventFilter;
    Borrowed(receiver?: null, amount?: null): BorrowedEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Staked(address,address,uint256,uint256)"(
      staker?: string | null,
      receiver?: null,
      amount?: null,
      minted?: null
    ): StakedEventFilter;
    Staked(
      staker?: string | null,
      receiver?: null,
      amount?: null,
      minted?: null
    ): StakedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "ReferralBound(address,address)"(
      user?: string | null,
      referrer?: null
    ): ReferralBoundEventFilter;
    ReferralBound(
      user?: string | null,
      referrer?: null
    ): ReferralBoundEventFilter;

    "UnstakeAccepted(uint256,address,address,uint256,uint256,uint256,uint256)"(
      accept_id?: null,
      staker?: string | null,
      receiver?: null,
      unstake_amount?: null,
      redeem_earning?: null,
      withdraw_eth?: null,
      repay_usdc?: null
    ): UnstakeAcceptedEventFilter;
    UnstakeAccepted(
      accept_id?: null,
      staker?: string | null,
      receiver?: null,
      unstake_amount?: null,
      redeem_earning?: null,
      withdraw_eth?: null,
      repay_usdc?: null
    ): UnstakeAcceptedEventFilter;

    "UnstakeFinished(uint256)"(accept_id?: null): UnstakeFinishedEventFilter;
    UnstakeFinished(accept_id?: null): UnstakeFinishedEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    NODE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SIGNER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    __ERC20_init(
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkRole(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    finished_unstake_accept(
      accept_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _weth: string,
      _usd_vault: string,
      _token_to_vault: string,
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    pre_mint_amount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pre_redeem_amount(
      repay_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    set_usd_vault(
      _usd_vault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stake(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stake_eth(
      receiver: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    token_to_vault(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      role: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unstake(
      receiver: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unstake_accept_id(overrides?: CallOverrides): Promise<BigNumber>;

    unstake_accepted(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usd_vault(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NODE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SIGNER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __ERC20_init(
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkRole(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finished_unstake_accept(
      accept_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _weth: string,
      _usd_vault: string,
      _token_to_vault: string,
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pre_mint_amount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pre_redeem_amount(
      repay_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    set_usd_vault(
      _usd_vault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stake(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stake_eth(
      receiver: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token_to_vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      role: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unstake(
      receiver: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unstake_accept_id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstake_accepted(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usd_vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
