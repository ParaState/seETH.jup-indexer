/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface UsdvaultInterface extends utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "NODE_ROLE()": FunctionFragment;
    "SIGNER_ROLE()": FunctionFragment;
    "_debitRiskBalance()": FunctionFragment;
    "_remoteBalance()": FunctionFragment;
    "_riskAccount()": FunctionFragment;
    "asset()": FunctionFragment;
    "borrow_risk_balance(uint256)": FunctionFragment;
    "checkRole(bytes32)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "remote_balance()": FunctionFragment;
    "repay_risk_balance(uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "risk_balance()": FunctionFragment;
    "setRiskAccount(address)": FunctionFragment;
    "transferOwnership(bytes32,address)": FunctionFragment;
    "update_remote_balance(uint8,uint256)": FunctionFragment;
    "update_risk_balance()": FunctionFragment;
    "version()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADMIN_ROLE"
      | "NODE_ROLE"
      | "SIGNER_ROLE"
      | "_debitRiskBalance"
      | "_remoteBalance"
      | "_riskAccount"
      | "asset"
      | "borrow_risk_balance"
      | "checkRole"
      | "deposit"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "remote_balance"
      | "repay_risk_balance"
      | "revokeRole"
      | "risk_balance"
      | "setRiskAccount"
      | "transferOwnership"
      | "update_remote_balance"
      | "update_risk_balance"
      | "version"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NODE_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SIGNER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_debitRiskBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_remoteBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_riskAccount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow_risk_balance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRole",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "remote_balance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay_risk_balance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "risk_balance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRiskAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "update_remote_balance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "update_risk_balance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NODE_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SIGNER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_debitRiskBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_remoteBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_riskAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrow_risk_balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remote_balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repay_risk_balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "risk_balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRiskAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_remote_balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_risk_balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Initialized(uint64)": EventFragment;
    "RemoteBalanceUpdated(uint8,uint256)": EventFragment;
    "RiskBalanceUpdated(uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoteBalanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RiskBalanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RemoteBalanceUpdatedEventObject {
  op: number;
  amount: BigNumber;
}
export type RemoteBalanceUpdatedEvent = TypedEvent<
  [number, BigNumber],
  RemoteBalanceUpdatedEventObject
>;

export type RemoteBalanceUpdatedEventFilter =
  TypedEventFilter<RemoteBalanceUpdatedEvent>;

export interface RiskBalanceUpdatedEventObject {
  newBalance: BigNumber;
}
export type RiskBalanceUpdatedEvent = TypedEvent<
  [BigNumber],
  RiskBalanceUpdatedEventObject
>;

export type RiskBalanceUpdatedEventFilter =
  TypedEventFilter<RiskBalanceUpdatedEvent>;

export interface WithdrawEventObject {
  to: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Usdvault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UsdvaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    NODE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SIGNER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    _debitRiskBalance(overrides?: CallOverrides): Promise<[string]>;

    _remoteBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    _riskAccount(overrides?: CallOverrides): Promise<[string]>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    borrow_risk_balance(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    checkRole(role: BytesLike, overrides?: CallOverrides): Promise<[void]>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _usdc: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    remote_balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    repay_risk_balance(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    risk_balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    setRiskAccount(
      riskAccount: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      role: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    update_remote_balance(
      op_type: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    update_risk_balance(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  NODE_ROLE(overrides?: CallOverrides): Promise<string>;

  SIGNER_ROLE(overrides?: CallOverrides): Promise<string>;

  _debitRiskBalance(overrides?: CallOverrides): Promise<string>;

  _remoteBalance(overrides?: CallOverrides): Promise<BigNumber>;

  _riskAccount(overrides?: CallOverrides): Promise<string>;

  asset(overrides?: CallOverrides): Promise<string>;

  borrow_risk_balance(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  checkRole(role: BytesLike, overrides?: CallOverrides): Promise<void>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _usdc: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  remote_balance(overrides?: CallOverrides): Promise<BigNumber>;

  repay_risk_balance(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  risk_balance(overrides?: CallOverrides): Promise<BigNumber>;

  setRiskAccount(
    riskAccount: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    role: BytesLike,
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  update_remote_balance(
    op_type: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  update_risk_balance(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  withdraw(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    NODE_ROLE(overrides?: CallOverrides): Promise<string>;

    SIGNER_ROLE(overrides?: CallOverrides): Promise<string>;

    _debitRiskBalance(overrides?: CallOverrides): Promise<string>;

    _remoteBalance(overrides?: CallOverrides): Promise<BigNumber>;

    _riskAccount(overrides?: CallOverrides): Promise<string>;

    asset(overrides?: CallOverrides): Promise<string>;

    borrow_risk_balance(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkRole(role: BytesLike, overrides?: CallOverrides): Promise<void>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(_usdc: string, overrides?: CallOverrides): Promise<void>;

    remote_balance(overrides?: CallOverrides): Promise<BigNumber>;

    repay_risk_balance(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    risk_balance(overrides?: CallOverrides): Promise<BigNumber>;

    setRiskAccount(
      riskAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      role: BytesLike,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    update_remote_balance(
      op_type: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    update_risk_balance(overrides?: CallOverrides): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RemoteBalanceUpdated(uint8,uint256)"(
      op?: null,
      amount?: null
    ): RemoteBalanceUpdatedEventFilter;
    RemoteBalanceUpdated(
      op?: null,
      amount?: null
    ): RemoteBalanceUpdatedEventFilter;

    "RiskBalanceUpdated(uint256)"(
      newBalance?: null
    ): RiskBalanceUpdatedEventFilter;
    RiskBalanceUpdated(newBalance?: null): RiskBalanceUpdatedEventFilter;

    "Withdraw(address,uint256)"(
      to?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(to?: string | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    NODE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SIGNER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    _debitRiskBalance(overrides?: CallOverrides): Promise<BigNumber>;

    _remoteBalance(overrides?: CallOverrides): Promise<BigNumber>;

    _riskAccount(overrides?: CallOverrides): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    borrow_risk_balance(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    checkRole(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _usdc: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    remote_balance(overrides?: CallOverrides): Promise<BigNumber>;

    repay_risk_balance(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    risk_balance(overrides?: CallOverrides): Promise<BigNumber>;

    setRiskAccount(
      riskAccount: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      role: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    update_remote_balance(
      op_type: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    update_risk_balance(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NODE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SIGNER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _debitRiskBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _remoteBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _riskAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow_risk_balance(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    checkRole(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _usdc: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    remote_balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repay_risk_balance(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    risk_balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRiskAccount(
      riskAccount: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      role: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    update_remote_balance(
      op_type: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    update_risk_balance(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
